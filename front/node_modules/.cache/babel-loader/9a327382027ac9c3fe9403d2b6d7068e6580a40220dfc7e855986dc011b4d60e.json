{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\tryg\\\\front\\\\src\\\\components\\\\ScraperForm.js\",\n  _s = $RefreshSig$();\n// // src/components/ScraperForm.js\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//         const response = await axios.post('http://localhost:3011/scrape', {\n//             urls: urls.split(',').map((url) => url.trim()),\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\n//           });\n\n//       console.log(response.data); \n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n// //save in stae and print as map\n\n//   return (\n//      <form onSubmit={handleSubmit}>\n//       <label>\n//         Enter URLs (comma-separated):\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//       </label>\n//       <br />\n//       <label>\n//         Enter jQuery selectors (comma-separated):\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//       </label>\n//       <br />\n//       <button type=\"submit\">Submit</button>\n\n//     </form>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// --------------------------------\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:3015/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data);\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Enter URLs (comma-separated):\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//         </label>\n//         <br />\n//         <label>\n//           Enter jQuery selectors (comma-separated):\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {/* Display the output on the frontend */}\n//       <div>\n//         <h2>Output:</h2>\n//         <pre>{output}</pre>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ScraperForm;\n\n// ---------------------------------------------------------perfect\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './form.css';\nimport html2pdf from 'html2pdf.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = ({\n  activeFieldset\n}) => /*#__PURE__*/_jsxDEV(\"ul\", {\n  id: \"progressbar\",\n  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 1 ? 'active' : '',\n    children: \"URL EXTRACTION\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 2 ? 'active' : '',\n    children: \"SCRAPING\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 3 ? 'active' : '',\n    children: \"EXTRACTED DATA\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 118,\n  columnNumber: 5\n}, this);\n_c = ProgressBar;\nconst Fieldset = ({\n  title,\n  subtitle,\n  children,\n  style\n}) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n  style: style,\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"fs-title\",\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"fs-subtitle\",\n    children: subtitle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 7\n  }, this), children]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 128,\n  columnNumber: 5\n}, this);\n_c2 = Fieldset;\nconst ScraperForm = () => {\n  _s();\n  const [activeFieldset, setActiveFieldset] = useState(1);\n  const [formData, setFormData] = useState({\n    email: '',\n    text2: '',\n    text3: ''\n  });\n  const [urls, setUrls] = useState('');\n  const [selectors, setSelectors] = useState('');\n  const [output, setOutput] = useState('');\n  const [showUrlWarning, setShowUrlWarning] = useState(false);\n  // const [downloadReady, setDownloadReady] = useState(false); \n  const preRef = useRef(null);\n  const isUrlValid = userInput => {\n    const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n    return res !== null;\n  };\n  useEffect(() => {\n    if (output.trim() !== '') {\n      setDownloadReady(true);\n    }\n  }, [output]);\n  const handleDownload = async () => {\n    try {\n      const response = await fetch('http://localhost:5022/download-output-pdf');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'output.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setDownloadReady(false);\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n    }\n  };\n\n  // const handleDownload = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:5022/download-output-pdf');\n  //     const blob = await response.blob();\n  //     const blobObject = new Blob([blob], { type: 'application/pdf' });\n\n  //     const url = window.URL.createObjectURL(blobObject);\n  //     const link = document.createElement('a');\n  //     link.href = url;\n  //     link.setAttribute('download', 'output.pdf');\n  //     document.body.appendChild(link);\n  //     link.click();\n  //     document.body.removeChild(link);\n  //     window.URL.revokeObjectURL(url);\n\n  //     setDownloadReady(false);\n  //   } catch (error) {\n  //     console.error('Error downloading PDF:', error);\n  //   }\n  // };\n\n  // const handleDownload = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:5000/create-pdf');\n  //     const blob = await response.blob();\n  //     const url = window.URL.createObjectURL(blob);\n  //     const link = document.createElement('a');\n  //     link.href = url;\n  //     link.setAttribute('download', 'output.pdf');\n  //     document.body.appendChild(link);\n  //     link.click();\n  //     link.parentNode.removeChild(link);\n  //   } catch (error) {\n  //     console.error('Error downloading PDF:', error);\n  //   }\n  // };\n\n  const handleDownloadPDF = () => {\n    const element = preRef.current; // Reference to the <pre> element\n    const pdfOptions = {\n      margin: 10,\n      filename: 'output.pdf',\n      image: {\n        type: 'jpeg',\n        quality: 0.98\n      },\n      html2canvas: {\n        scale: 2\n      },\n      jsPDF: {\n        unit: 'mm',\n        format: 'a4',\n        orientation: 'portrait'\n      }\n    };\n    html2pdf(element, pdfOptions);\n  };\n  const downloadPDF = async () => {\n    try {\n      const response = await fetch('http://localhost:5022/generate-pdf');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'data.pdf');\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n    }\n  };\n  const handleStart = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5022/scraper', {\n        urls\n      });\n      setUrls(response.data.urls || []);\n    } catch (error) {\n      console.error('Error scraping URL:', error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n    if (name === 'email') {\n      setShowUrlWarning(!isUrlValid(value));\n    }\n  };\n  const handleNext = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset + 1);\n  };\n  const handlePrevious = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset - 1);\n  };\n  const handleSubmit2 = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5022/scrape', {\n        urls: urls.split(',').map(url => url.trim()),\n        selectors: selectors.split(',').map(selector => selector.trim())\n      });\n      console.log(response.data + '\\n');\n\n      // Set the output in the state to be displayed on the frontend\n      setOutput(response.data.tableString);\n      handleNext();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"msform\",\n      onSubmit: handleSubmit2,\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        activeFieldset: activeFieldset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 1 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"fs-title\",\n          children: \"Provide the Main URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          class: \"fs-subtitle\",\n          children: \"This step will provide the list of all URLS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          placeholder: \"Main URL\",\n          value: formData.email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 14\n        }, this), showUrlWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Please enter a valid URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: downloadPDF,\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleNext,\n          disabled: !formData.email.trim() || showUrlWarning,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 2 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"SCRAPING STAGE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"fs-subtitle\",\n          children: \"Enter the URL and the selector that you want to scrape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: urls,\n          placeholder: \"Enter URL to scrape\",\n          onChange: e => {\n            setUrls(e.target.value);\n            setShowUrlWarning(!isUrlValid(e.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Selectors\",\n          value: selectors,\n          onChange: e => setSelectors(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 9\n        }, this), showUrlWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Please enter a valid URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit action-button\",\n          onClick: handleSubmit2,\n          disabled: !urls || !selectors || showUrlWarning,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 3 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"EXTRACTED DATA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            ref: preRef,\n            children: output\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleDownloadPDF,\n          disabled: !output.trim(),\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n};\n_s(ScraperForm, \"jyKokcME/5EsBB1/vklWYg/cLc8=\");\n_c3 = ScraperForm;\nexport default ScraperForm;\n\n// this is the frontend code (/front/ScraperForm.js):\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import axios from 'axios';\n// import './form.css';\n\n// const ProgressBar = ({ activeFieldset }) => (\n//     <ul id=\"progressbar\">\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\n//       <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\n//       <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\n//     </ul>\n//   );\n\n//   const Fieldset = ({ title, subtitle, children, style }) => (\n//     <fieldset style={style}>\n//       <h2 className=\"fs-title\">{title}</h2>\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\n//       {children}\n//     </fieldset>\n//   );\n\n// const ScraperForm = () => {\n\n//     const [activeFieldset, setActiveFieldset] = useState(1);\n\n//     const [formData, setFormData] = useState({\n//       email: '',\n//       text2: '',\n//       text3: '',\n//     });\n\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\n//   const preRef = useRef(null);\n\n//   const isUrlValid = (userInput) => {\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n//     return res !== null;\n//   };\n\n//   const handleStart = async (e) => {\n//     e.preventDefault();\n\n//     try{\n//       const response = await axios.post('http://localhost:5022/scraper', { urls });\n//       setUrls(response.data.urls || []);\n//     } catch (error) {\n//       console.error('Error scraping URL:', error);\n//     }\n//   }\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n\n//     if (name === 'email') {\n//       setShowUrlWarning(!isUrlValid(value));\n//     }\n//   };\n\n//   const handleNext = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\n//   };\n\n//   const handlePrevious = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\n//   };\n\n//   const handleSubmit2 = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:5022/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data + '\\n');\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//       handleNext();\n\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n\n//   };\n\n//   return (\n\n//     <div>\n\n//       <form id=\"msform\" onSubmit={handleSubmit2}> \n//         <ProgressBar activeFieldset={activeFieldset} />\n\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\n//         <h2 class=\"fs-title\">Provide the Main URL</h2>\n//  \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\n//              <input\n//           type=\"text\"\n//           name=\"email\"\n//           placeholder=\"Main URL\"\n//           value={formData.email}\n//           onChange={handleInputChange}\n//         />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\n//           Start\n//         </button>\n//         <button type=\"button\" className=\"next action-button\" >\n//           Download\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\"\n//           onClick={handleNext}\n//           disabled={!formData.email.trim() || showUrlWarning}\n//         >\n//           Next\n//         </button>\n//         </Fieldset>\n\n//        <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\n//         <input\n//         type=\"text\"\n//         value={urls}\n//         placeholder=\"Enter URL to scrape\"\n//         onChange={(e) => {\n//           setUrls(e.target.value);\n//           setShowUrlWarning(!isUrlValid(e.target.value));\n//         }}\n//       />\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\n//           Previous\n//         </button>\n//         <button\n//         type=\"submit\"\n//         className=\"submit action-button\"\n//         onClick={handleSubmit2}\n//         disabled={!urls || !selectors || showUrlWarning}>\n//           Submit\n//         </button>\n//         </Fieldset> \n\n//         <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">EXTRACTED DATA</h2>\n//         <div className=\"result\">\n//           <pre ref={preRef}>{output}</pre>\n//         </div>\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\n//           Previous\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\">\n//           Download\n//         </button>\n//       </Fieldset>\n\n//     </form>\n//     </div>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// this is the server side code (/back/index.js).\n\n// const express = require('express');\n// const bodyParser = require('body-parser');\n// const request = require('request-promise');\n// const cheerio = require('cheerio');\n// const fs = require('fs');\n// const Json2csvParser = require('json2csv').Parser;\n// const cors = require('cors');\n// const path = require('path');\n\n// const app = express();\n// const port = 5022;\n\n// app.use(bodyParser.json());\n// app.use(cors());\n\n// app.get('/', (req, res) => {\n//   res.send('Hello, this is the root!');\n// });\n\n// app.post('/scrape', async (req, res) => {\n//   const { urls, selectors } = req.body;\n//   let pages = [];\n\n//   for (let article of urls) {\n//     const response = await request({\n//       uri: article.trim(),\n//       gzip: true,\n//     });\n\n//     let $ = cheerio.load(response);\n\n//     let pageData = {};\n\n//     selectors.forEach((selector) => {\n//       let values = [];\n//       $(selector).each((index, element) => {\n//         values.push($(element).text().trim());\n//       });\n//       pageData[selector] = values;\n//     });\n\n//     pages.push(pageData);\n//   }\n\n//   // Save data to a file or database as needed\n//   fs.writeFileSync('./data.json', JSON.stringify(pages), 'utf-8');\n\n//   const tableString = getTableString(pages);\n//   const outputPath = './output.txt';\n//   fs.writeFileSync(outputPath, tableString, 'utf-8');\n\n//   res.json({ tableString, pages });\n\n//   const fields = selectors;\n//   const json2csvParser = new Json2csvParser({ fields });\n//   const csv = json2csvParser.parse(pages);\n//   console.log(csv);\n\n//   console.table(pages);\n// });\n\n// // table string\n// function getTableString(pages) {\n//   let tableString = '';\n//   pages.forEach((page) => {\n//     for (let key in page) {\n//       tableString += `${key}: \\n \\n ${page[key].join('\\n')}\\n`;\n\n//     }\n//     tableString += '\\n'.repeat(5);\n//   });\n//   return tableString;\n// }\n\n// app.listen(port, () => {\n//   console.log(`Server is running on http://localhost:${port}`);\n// });\n\n// Update the code such that the second button in the third fieldset should create a pdf of the content displayed by <div className=\"result\"><pre ref={preRef}>{output}</pre></div> and also download the generated pdf when clicked.\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProgressBar\");\n$RefreshReg$(_c2, \"Fieldset\");\n$RefreshReg$(_c3, \"ScraperForm\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","html2pdf","jsxDEV","_jsxDEV","ProgressBar","activeFieldset","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","Fieldset","title","subtitle","style","_c2","ScraperForm","_s","setActiveFieldset","formData","setFormData","email","text2","text3","urls","setUrls","selectors","setSelectors","output","setOutput","showUrlWarning","setShowUrlWarning","preRef","isUrlValid","userInput","res","match","trim","setDownloadReady","handleDownload","response","fetch","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","error","console","handleDownloadPDF","element","current","pdfOptions","margin","filename","image","type","quality","html2canvas","scale","jsPDF","unit","format","orientation","downloadPDF","parentNode","handleStart","e","preventDefault","post","data","handleInputChange","name","value","target","prevData","handleNext","prevActiveFieldset","handlePrevious","handleSubmit2","split","map","selector","log","tableString","onSubmit","display","class","placeholder","onChange","color","onClick","disabled","ref","_c3","$RefreshReg$"],"sources":["C:/Users/PC/tryg/front/src/components/ScraperForm.js"],"sourcesContent":["// // src/components/ScraperForm.js\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//         const response = await axios.post('http://localhost:3011/scrape', {\r\n//             urls: urls.split(',').map((url) => url.trim()),\r\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//           });\r\n\r\n//       console.log(response.data); \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n// //save in stae and print as map\r\n\r\n//   return (\r\n//      <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         Enter URLs (comma-separated):\r\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Enter jQuery selectors (comma-separated):\r\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\">Submit</button>\r\n  \r\n//     </form>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n// --------------------------------\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:3015/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data);\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URLs (comma-separated):\r\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Enter jQuery selectors (comma-separated):\r\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {/* Display the output on the frontend */}\r\n//       <div>\r\n//         <h2>Output:</h2>\r\n//         <pre>{output}</pre>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n// ---------------------------------------------------------perfect\r\n\r\n\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './form.css';\r\nimport html2pdf from 'html2pdf.js';\r\n\r\n\r\nconst ProgressBar = ({ activeFieldset }) => (\r\n    <ul id=\"progressbar\">\r\n      <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n      <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\r\n      <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\r\n    </ul>\r\n  );\r\n\r\n\r\n  \r\n  const Fieldset = ({ title, subtitle, children, style }) => (\r\n    <fieldset style={style}>\r\n      <h2 className=\"fs-title\">{title}</h2>\r\n      <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n      {children}\r\n    </fieldset>\r\n  );\r\n\r\nconst ScraperForm = () => {\r\n\r\n    \r\n    const [activeFieldset, setActiveFieldset] = useState(1);\r\n  \r\n    const [formData, setFormData] = useState({\r\n      email: '',\r\n      text2: '',\r\n      text3: '',\r\n    });\r\n\r\n\r\n  const [urls, setUrls] = useState('');\r\n  const [selectors, setSelectors] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n  // const [downloadReady, setDownloadReady] = useState(false); \r\n  const preRef = useRef(null);\r\n\r\n\r\n  const isUrlValid = (userInput) => {\r\n    const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n    return res !== null;\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n   \r\n    if (output.trim() !== '') {\r\n      setDownloadReady(true);\r\n    }\r\n  }, [output]);\r\n\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5022/download-output-pdf');\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'output.pdf');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      setDownloadReady(false);\r\n    } catch (error) {\r\n      console.error('Error downloading PDF:', error);\r\n    }\r\n  };\r\n\r\n  // const handleDownload = async () => {\r\n  //   try {\r\n  //     const response = await fetch('http://localhost:5022/download-output-pdf');\r\n  //     const blob = await response.blob();\r\n  //     const blobObject = new Blob([blob], { type: 'application/pdf' });\r\n\r\n  //     const url = window.URL.createObjectURL(blobObject);\r\n  //     const link = document.createElement('a');\r\n  //     link.href = url;\r\n  //     link.setAttribute('download', 'output.pdf');\r\n  //     document.body.appendChild(link);\r\n  //     link.click();\r\n  //     document.body.removeChild(link);\r\n  //     window.URL.revokeObjectURL(url);\r\n  \r\n  //     setDownloadReady(false);\r\n  //   } catch (error) {\r\n  //     console.error('Error downloading PDF:', error);\r\n  //   }\r\n  // };\r\n  \r\n\r\n  // const handleDownload = async () => {\r\n  //   try {\r\n  //     const response = await fetch('http://localhost:5000/create-pdf');\r\n  //     const blob = await response.blob();\r\n  //     const url = window.URL.createObjectURL(blob);\r\n  //     const link = document.createElement('a');\r\n  //     link.href = url;\r\n  //     link.setAttribute('download', 'output.pdf');\r\n  //     document.body.appendChild(link);\r\n  //     link.click();\r\n  //     link.parentNode.removeChild(link);\r\n  //   } catch (error) {\r\n  //     console.error('Error downloading PDF:', error);\r\n  //   }\r\n  // };\r\n\r\n\r\n  const handleDownloadPDF = () => {\r\n    const element = preRef.current; // Reference to the <pre> element\r\n    const pdfOptions = {\r\n      margin: 10,\r\n      filename: 'output.pdf',\r\n      image: { type: 'jpeg', quality: 0.98 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n    };\r\n\r\n    html2pdf(element, pdfOptions);\r\n  };\r\n\r\n\r\n\r\n  const downloadPDF = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5022/generate-pdf');\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'data.pdf');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n    } catch (error) {\r\n      console.error('Error downloading PDF:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  const handleStart = async (e) => {\r\n    e.preventDefault();\r\n   \r\n   \r\n    try{\r\n      const response = await axios.post('http://localhost:5022/scraper', { urls });\r\n      setUrls(response.data.urls || []);\r\n    } catch (error) {\r\n      console.error('Error scraping URL:', error);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n\r\n    if (name === 'email') {\r\n      setShowUrlWarning(!isUrlValid(value));\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleSubmit2 = async (e) => {\r\n    e.preventDefault();\r\n\r\n \r\n    try {\r\n      const response = await axios.post('http://localhost:5022/scrape', {\r\n        urls: urls.split(',').map((url) => url.trim()),\r\n        selectors: selectors.split(',').map((selector) => selector.trim()),\r\n      });\r\n\r\n      console.log(response.data + '\\n');\r\n\r\n      // Set the output in the state to be displayed on the frontend\r\n      setOutput(response.data.tableString);\r\n      handleNext();\r\n\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n   \r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n      <form id=\"msform\" onSubmit={handleSubmit2}> \r\n        <ProgressBar activeFieldset={activeFieldset} />\r\n\r\n        <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n        <h2 class=\"fs-title\">Provide the Main URL</h2>\r\n \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n             <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Main URL\"\r\n          value={formData.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n        <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n          Start\r\n        </button>\r\n        <button type=\"button\" className=\"next action-button\" onClick={downloadPDF}>\r\n          Download\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"next action-button\"\r\n          onClick={handleNext}\r\n          disabled={!formData.email.trim() || showUrlWarning}\r\n        >\r\n          Next\r\n        </button>\r\n        </Fieldset>\r\n\r\n\r\n\r\n       <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n       <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n        <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n        <input\r\n        type=\"text\"\r\n        value={urls}\r\n        placeholder=\"Enter URL to scrape\"\r\n        onChange={(e) => {\r\n          setUrls(e.target.value);\r\n          setShowUrlWarning(!isUrlValid(e.target.value));\r\n        }}\r\n      />\r\n        <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n        {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n          Previous\r\n        </button>\r\n        <button\r\n        type=\"submit\"\r\n        className=\"submit action-button\"\r\n        onClick={handleSubmit2}\r\n        disabled={!urls || !selectors || showUrlWarning}>\r\n          Submit\r\n        </button>\r\n        </Fieldset> \r\n\r\n     \r\n        <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n        <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n        <div className=\"result\">\r\n          <pre ref={preRef}>{output}</pre>\r\n        </div>\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n          Previous\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"next action-button\"\r\n          onClick={handleDownloadPDF}\r\n            disabled={!output.trim()}\r\n        >\r\n          Download\r\n        </button>\r\n      </Fieldset>\r\n\r\n      \r\n\r\n    </form>\r\n    </div>\r\n    \r\n     \r\n\r\n\r\n  );\r\n};\r\n\r\nexport default ScraperForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// this is the frontend code (/front/ScraperForm.js):\r\n\r\n// import React, { useState, useRef, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import './form.css';\r\n\r\n\r\n// const ProgressBar = ({ activeFieldset }) => (\r\n//     <ul id=\"progressbar\">\r\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n//       <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\r\n//       <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\r\n//     </ul>\r\n//   );\r\n\r\n\r\n  \r\n//   const Fieldset = ({ title, subtitle, children, style }) => (\r\n//     <fieldset style={style}>\r\n//       <h2 className=\"fs-title\">{title}</h2>\r\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n//       {children}\r\n//     </fieldset>\r\n//   );\r\n\r\n// const ScraperForm = () => {\r\n\r\n    \r\n//     const [activeFieldset, setActiveFieldset] = useState(1);\r\n  \r\n//     const [formData, setFormData] = useState({\r\n//       email: '',\r\n//       text2: '',\r\n//       text3: '',\r\n//     });\r\n\r\n\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n//   const preRef = useRef(null);\r\n\r\n\r\n//   const isUrlValid = (userInput) => {\r\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n//     return res !== null;\r\n//   };\r\n  \r\n  \r\n  \r\n//   const handleStart = async (e) => {\r\n//     e.preventDefault();\r\n   \r\n   \r\n//     try{\r\n//       const response = await axios.post('http://localhost:5022/scraper', { urls });\r\n//       setUrls(response.data.urls || []);\r\n//     } catch (error) {\r\n//       console.error('Error scraping URL:', error);\r\n//     }\r\n//   }\r\n\r\n\r\n  \r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prevData) => ({\r\n//       ...prevData,\r\n//       [name]: value,\r\n//     }));\r\n\r\n//     if (name === 'email') {\r\n//       setShowUrlWarning(!isUrlValid(value));\r\n//     }\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n//   };\r\n\r\n//   const handlePrevious = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleSubmit2 = async (e) => {\r\n//     e.preventDefault();\r\n\r\n \r\n//     try {\r\n//       const response = await axios.post('http://localhost:5022/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data + '\\n');\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//       handleNext();\r\n\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n   \r\n//   };\r\n\r\n//   return (\r\n\r\n//     <div>\r\n\r\n//       <form id=\"msform\" onSubmit={handleSubmit2}> \r\n//         <ProgressBar activeFieldset={activeFieldset} />\r\n\r\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n//         <h2 class=\"fs-title\">Provide the Main URL</h2>\r\n//  \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n//              <input\r\n//           type=\"text\"\r\n//           name=\"email\"\r\n//           placeholder=\"Main URL\"\r\n//           value={formData.email}\r\n//           onChange={handleInputChange}\r\n//         />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n//           Start\r\n//         </button>\r\n//         <button type=\"button\" className=\"next action-button\" >\r\n//           Download\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\"\r\n//           onClick={handleNext}\r\n//           disabled={!formData.email.trim() || showUrlWarning}\r\n//         >\r\n//           Next\r\n//         </button>\r\n//         </Fieldset>\r\n\r\n\r\n\r\n//        <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n//         <input\r\n//         type=\"text\"\r\n//         value={urls}\r\n//         placeholder=\"Enter URL to scrape\"\r\n//         onChange={(e) => {\r\n//           setUrls(e.target.value);\r\n//           setShowUrlWarning(!isUrlValid(e.target.value));\r\n//         }}\r\n//       />\r\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n//           Previous\r\n//         </button>\r\n//         <button\r\n//         type=\"submit\"\r\n//         className=\"submit action-button\"\r\n//         onClick={handleSubmit2}\r\n//         disabled={!urls || !selectors || showUrlWarning}>\r\n//           Submit\r\n//         </button>\r\n//         </Fieldset> \r\n\r\n     \r\n//         <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n//         <div className=\"result\">\r\n//           <pre ref={preRef}>{output}</pre>\r\n//         </div>\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n//           Previous\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\">\r\n//           Download\r\n//         </button>\r\n//       </Fieldset>\r\n\r\n      \r\n\r\n//     </form>\r\n//     </div>\r\n    \r\n     \r\n\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n\r\n// this is the server side code (/back/index.js).\r\n\r\n// const express = require('express');\r\n// const bodyParser = require('body-parser');\r\n// const request = require('request-promise');\r\n// const cheerio = require('cheerio');\r\n// const fs = require('fs');\r\n// const Json2csvParser = require('json2csv').Parser;\r\n// const cors = require('cors');\r\n// const path = require('path');\r\n\r\n// const app = express();\r\n// const port = 5022;\r\n\r\n// app.use(bodyParser.json());\r\n// app.use(cors());\r\n\r\n// app.get('/', (req, res) => {\r\n//   res.send('Hello, this is the root!');\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n// app.post('/scrape', async (req, res) => {\r\n//   const { urls, selectors } = req.body;\r\n//   let pages = [];\r\n\r\n//   for (let article of urls) {\r\n//     const response = await request({\r\n//       uri: article.trim(),\r\n//       gzip: true,\r\n//     });\r\n\r\n//     let $ = cheerio.load(response);\r\n\r\n//     let pageData = {};\r\n\r\n//     selectors.forEach((selector) => {\r\n//       let values = [];\r\n//       $(selector).each((index, element) => {\r\n//         values.push($(element).text().trim());\r\n//       });\r\n//       pageData[selector] = values;\r\n//     });\r\n\r\n//     pages.push(pageData);\r\n//   }\r\n   \r\n\r\n  \r\n\r\n//   // Save data to a file or database as needed\r\n//   fs.writeFileSync('./data.json', JSON.stringify(pages), 'utf-8');\r\n\r\n//   const tableString = getTableString(pages);\r\n//   const outputPath = './output.txt';\r\n//   fs.writeFileSync(outputPath, tableString, 'utf-8');\r\n\r\n//   res.json({ tableString, pages });\r\n\r\n//   const fields = selectors;\r\n//   const json2csvParser = new Json2csvParser({ fields });\r\n//   const csv = json2csvParser.parse(pages);\r\n//   console.log(csv);\r\n\r\n//   console.table(pages);\r\n// });\r\n\r\n// // table string\r\n// function getTableString(pages) {\r\n//   let tableString = '';\r\n//   pages.forEach((page) => {\r\n//     for (let key in page) {\r\n//       tableString += `${key}: \\n \\n ${page[key].join('\\n')}\\n`;\r\n      \r\n\r\n//     }\r\n//     tableString += '\\n'.repeat(5);\r\n//   });\r\n//   return tableString;\r\n// }\r\n\r\n// app.listen(port, () => {\r\n//   console.log(`Server is running on http://localhost:${port}`);\r\n// });\r\n\r\n\r\n\r\n\r\n// Update the code such that the second button in the third fieldset should create a pdf of the content displayed by <div className=\"result\"><pre ref={preRef}>{output}</pre></div> and also download the generated pdf when clicked.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AACnB,OAAOC,QAAQ,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAe,CAAC,kBACnCF,OAAA;EAAIG,EAAE,EAAC,aAAa;EAAAC,QAAA,gBAClBJ,OAAA;IAAIK,SAAS,EAAEH,cAAc,KAAK,CAAC,GAAG,QAAQ,GAAG,EAAG;IAAAE,QAAA,EAAC;EAAc;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eACxET,OAAA;IAAIK,SAAS,EAAEH,cAAc,KAAK,CAAC,GAAG,QAAQ,GAAG,EAAG;IAAAE,QAAA,EAAC;EAAQ;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eAClET,OAAA;IAAIK,SAAS,EAAEH,cAAc,KAAK,CAAC,GAAG,QAAQ,GAAG,EAAG;IAAAE,QAAA,EAAC;EAAc;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACtE,CACL;AAACC,EAAA,GANET,WAAW;AAUf,MAAMU,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAET,QAAQ;EAAEU;AAAM,CAAC,kBACpDd,OAAA;EAAUc,KAAK,EAAEA,KAAM;EAAAV,QAAA,gBACrBJ,OAAA;IAAIK,SAAS,EAAC,UAAU;IAAAD,QAAA,EAAEQ;EAAK;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eACrCT,OAAA;IAAIK,SAAS,EAAC,aAAa;IAAAD,QAAA,EAAES;EAAQ;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,EAC1CL,QAAQ;AAAA;EAAAE,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACD,CACX;AAACM,GAAA,GANIJ,QAAQ;AAQhB,MAAMK,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAGtB,MAAM,CAACf,cAAc,EAAEgB,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC;IACvC2B,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAGJ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkC,MAAM,EAAEC,SAAS,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC3D;EACA,MAAMsC,MAAM,GAAGrC,MAAM,CAAC,IAAI,CAAC;EAG3B,MAAMsC,UAAU,GAAIC,SAAS,IAAK;IAChC,MAAMC,GAAG,GAAGD,SAAS,CAACE,KAAK,CAAC,kGAAkG,CAAC;IAC/H,OAAOD,GAAG,KAAK,IAAI;EACrB,CAAC;EAGDvC,SAAS,CAAC,MAAM;IAEd,IAAIgC,MAAM,CAACS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACxBC,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC;EAEZ,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,CAAC;MACzE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MAC5C,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;MACfI,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC;MAC3CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;MAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;MACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;MAC/BT,gBAAgB,CAAC,KAAK,CAAC;IACzB,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,OAAO,GAAG3B,MAAM,CAAC4B,OAAO,CAAC,CAAC;IAChC,MAAMC,UAAU,GAAG;MACjBC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,YAAY;MACtBC,KAAK,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAK,CAAC;MACtCC,WAAW,EAAE;QAAEC,KAAK,EAAE;MAAE,CAAC;MACzBC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAW;IAC7D,CAAC;IAED1E,QAAQ,CAAC6D,OAAO,EAAEE,UAAU,CAAC;EAC/B,CAAC;EAID,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMjC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MAC5C,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;MACfI,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;MACzCH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;MAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;MACZP,IAAI,CAAC2B,UAAU,CAACnB,WAAW,CAACR,IAAI,CAAC;IACnC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAGD,MAAMmB,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAGlB,IAAG;MACD,MAAMrC,QAAQ,GAAG,MAAM3C,KAAK,CAACiF,IAAI,CAAC,+BAA+B,EAAE;QAAEtD;MAAK,CAAC,CAAC;MAC5EC,OAAO,CAACe,QAAQ,CAACuC,IAAI,CAACvD,IAAI,IAAI,EAAE,CAAC;IACnC,CAAC,CAAC,OAAOgC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAKD,MAAMwB,iBAAiB,GAAIJ,CAAC,IAAK;IAC/B,MAAM;MAAEK,IAAI;MAAEC;IAAM,CAAC,GAAGN,CAAC,CAACO,MAAM;IAChC/D,WAAW,CAAEgE,QAAQ,KAAM;MACzB,GAAGA,QAAQ;MACX,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;IAEH,IAAID,IAAI,KAAK,OAAO,EAAE;MACpBlD,iBAAiB,CAAC,CAACE,UAAU,CAACiD,KAAK,CAAC,CAAC;IACvC;EACF,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvBnE,iBAAiB,CAAEoE,kBAAkB,IAAKA,kBAAkB,GAAG,CAAC,CAAC;EACnE,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BrE,iBAAiB,CAAEoE,kBAAkB,IAAKA,kBAAkB,GAAG,CAAC,CAAC;EACnE,CAAC;EAKD,MAAME,aAAa,GAAG,MAAOZ,CAAC,IAAK;IACjCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAGlB,IAAI;MACF,MAAMrC,QAAQ,GAAG,MAAM3C,KAAK,CAACiF,IAAI,CAAC,8BAA8B,EAAE;QAChEtD,IAAI,EAAEA,IAAI,CAACiE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAE/C,GAAG,IAAKA,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;QAC9CX,SAAS,EAAEA,SAAS,CAAC+D,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACtD,IAAI,CAAC,CAAC;MACnE,CAAC,CAAC;MAEFoB,OAAO,CAACmC,GAAG,CAACpD,QAAQ,CAACuC,IAAI,GAAG,IAAI,CAAC;;MAEjC;MACAlD,SAAS,CAACW,QAAQ,CAACuC,IAAI,CAACc,WAAW,CAAC;MACpCR,UAAU,CAAC,CAAC;IAEd,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EAEF,CAAC;EAED,oBAEExD,OAAA;IAAAI,QAAA,eAEEJ,OAAA;MAAMG,EAAE,EAAC,QAAQ;MAAC2F,QAAQ,EAAEN,aAAc;MAAApF,QAAA,gBACxCJ,OAAA,CAACC,WAAW;QAACC,cAAc,EAAEA;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE/CT,OAAA,CAACW,QAAQ;QAACG,KAAK,EAAE;UAAEiF,OAAO,EAAE7F,cAAc,KAAK,CAAC,GAAG,OAAO,GAAG;QAAO,CAAE;QAAAE,QAAA,gBACtEJ,OAAA;UAAIgG,KAAK,EAAC,UAAU;UAAA5F,QAAA,EAAC;QAAoB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/CT,OAAA;UAAIgG,KAAK,EAAC,aAAa;UAAA5F,QAAA,EAAC;QAA2C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClET,OAAA;UACHiE,IAAI,EAAC,MAAM;UACXgB,IAAI,EAAC,OAAO;UACZgB,WAAW,EAAC,UAAU;UACtBf,KAAK,EAAE/D,QAAQ,CAACE,KAAM;UACtB6E,QAAQ,EAAElB;QAAkB;UAAA1E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,EACDqB,cAAc,iBAAI9B,OAAA;UAAGc,KAAK,EAAE;YAAEqF,KAAK,EAAE;UAAM,CAAE;UAAA/F,QAAA,EAAC;QAAyB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC5ET,OAAA;UAAQiE,IAAI,EAAC,QAAQ;UAAC5D,SAAS,EAAC,oBAAoB;UAAC+F,OAAO,EAAEzB,WAAY;UAAAvE,QAAA,EAAC;QAE3E;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UAAQiE,IAAI,EAAC,QAAQ;UAAC5D,SAAS,EAAC,oBAAoB;UAAC+F,OAAO,EAAE3B,WAAY;UAAArE,QAAA,EAAC;QAE3E;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UACEiE,IAAI,EAAC,QAAQ;UACb5D,SAAS,EAAC,oBAAoB;UAC9B+F,OAAO,EAAEf,UAAW;UACpBgB,QAAQ,EAAE,CAAClF,QAAQ,CAACE,KAAK,CAACgB,IAAI,CAAC,CAAC,IAAIP,cAAe;UAAA1B,QAAA,EACpD;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAIZT,OAAA,CAACW,QAAQ;QAACG,KAAK,EAAE;UAAEiF,OAAO,EAAE7F,cAAc,KAAK,CAAC,GAAG,OAAO,GAAG;QAAO,CAAE;QAAAE,QAAA,gBACtEJ,OAAA;UAAIK,SAAS,EAAC,UAAU;UAAAD,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3CT,OAAA;UAAIK,SAAS,EAAC,aAAa;UAAAD,QAAA,EAAC;QAAsD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvFT,OAAA;UACAiE,IAAI,EAAC,MAAM;UACXiB,KAAK,EAAE1D,IAAK;UACZyE,WAAW,EAAC,qBAAqB;UACjCC,QAAQ,EAAGtB,CAAC,IAAK;YACfnD,OAAO,CAACmD,CAAC,CAACO,MAAM,CAACD,KAAK,CAAC;YACvBnD,iBAAiB,CAAC,CAACE,UAAU,CAAC2C,CAAC,CAACO,MAAM,CAACD,KAAK,CAAC,CAAC;UAChD;QAAE;UAAA5E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACAT,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAACgC,WAAW,EAAC,WAAW;UAACf,KAAK,EAAExD,SAAU;UAACwE,QAAQ,EAAGtB,CAAC,IAAKjD,YAAY,CAACiD,CAAC,CAACO,MAAM,CAACD,KAAK;QAAE;UAAA5E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAC7GqB,cAAc,iBAAI9B,OAAA;UAAGc,KAAK,EAAE;YAAEqF,KAAK,EAAE;UAAM,CAAE;UAAA/F,QAAA,EAAC;QAAyB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC5ET,OAAA;UAAQiE,IAAI,EAAC,QAAQ;UAAC5D,SAAS,EAAC,wBAAwB;UAAC+F,OAAO,EAAEb,cAAe;UAAAnF,QAAA,EAAE;QAEnF;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UACAiE,IAAI,EAAC,QAAQ;UACb5D,SAAS,EAAC,sBAAsB;UAChC+F,OAAO,EAAEZ,aAAc;UACvBa,QAAQ,EAAE,CAAC7E,IAAI,IAAI,CAACE,SAAS,IAAII,cAAe;UAAA1B,QAAA,EAAC;QAEjD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGXT,OAAA,CAACW,QAAQ;QAACG,KAAK,EAAE;UAAEiF,OAAO,EAAE7F,cAAc,KAAK,CAAC,GAAG,OAAO,GAAG;QAAO,CAAE;QAAAE,QAAA,gBACtEJ,OAAA;UAAIK,SAAS,EAAC,UAAU;UAAAD,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5CT,OAAA;UAAKK,SAAS,EAAC,QAAQ;UAAAD,QAAA,eACrBJ,OAAA;YAAKsG,GAAG,EAAEtE,MAAO;YAAA5B,QAAA,EAAEwB;UAAM;YAAAtB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,eACNT,OAAA;UAAQiE,IAAI,EAAC,QAAQ;UAAC5D,SAAS,EAAC,wBAAwB;UAAC+F,OAAO,EAAEb,cAAe;UAAAnF,QAAA,EAAC;QAElF;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTT,OAAA;UACEiE,IAAI,EAAC,QAAQ;UACb5D,SAAS,EAAC,oBAAoB;UAC9B+F,OAAO,EAAE1C,iBAAkB;UACzB2C,QAAQ,EAAE,CAACzE,MAAM,CAACS,IAAI,CAAC,CAAE;UAAAjC,QAAA,EAC5B;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAMV,CAAC;AAACQ,EAAA,CA/QID,WAAW;AAAAuF,GAAA,GAAXvF,WAAW;AAiRjB,eAAeA,WAAW;;AA8B1B;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAKA;AACA;;AAEA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;AAAA,IAAAN,EAAA,EAAAK,GAAA,EAAAwF,GAAA;AAAAC,YAAA,CAAA9F,EAAA;AAAA8F,YAAA,CAAAzF,GAAA;AAAAyF,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}