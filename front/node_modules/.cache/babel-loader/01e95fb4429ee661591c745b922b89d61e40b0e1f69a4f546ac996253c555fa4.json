{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\tryg\\\\front\\\\src\\\\components\\\\ScraperForm.js\",\n  _s = $RefreshSig$();\n// // src/components/ScraperForm.js\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//         const response = await axios.post('http://localhost:3011/scrape', {\n//             urls: urls.split(',').map((url) => url.trim()),\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\n//           });\n\n//       console.log(response.data); \n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n// //save in stae and print as map\n\n//   return (\n//      <form onSubmit={handleSubmit}>\n//       <label>\n//         Enter URLs (comma-separated):\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//       </label>\n//       <br />\n//       <label>\n//         Enter jQuery selectors (comma-separated):\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//       </label>\n//       <br />\n//       <button type=\"submit\">Submit</button>\n\n//     </form>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// --------------------------------\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:3015/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data);\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Enter URLs (comma-separated):\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//         </label>\n//         <br />\n//         <label>\n//           Enter jQuery selectors (comma-separated):\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {/* Display the output on the frontend */}\n//       <div>\n//         <h2>Output:</h2>\n//         <pre>{output}</pre>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ScraperForm;\n\n// ---------------------------------------------------------perfect\n\n// import React, { useState, useRef} from 'react';\n// import axios from 'axios';\n// import './form.css';\n// import * as html2pdf from 'html2pdf.js';\n\n// const ProgressBar = ({ activeFieldset }) => (\n//     <ul id=\"progressbar\">\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\n//       <li className={activeFieldset === 2 ? 'active' : ''}>EXTRACTED URLS</li>\n//       <li className={activeFieldset === 3 ? 'active' : ''}>SCRAPING</li>\n//       <li className={activeFieldset === 4 ? 'active' : ''}>EXTRACTED DATA</li>\n//     </ul>\n//   );\n\n//   const Fieldset = ({ title, subtitle, children, style }) => (\n//     <fieldset style={style}>\n//       <h2 className=\"fs-title\">{title}</h2>\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\n//       {children}\n//     </fieldset>\n//   );\n\n// const ScraperForm = () => {\n\n//     const [activeFieldset, setActiveFieldset] = useState(1);\n//     const [formData, setFormData] = useState({\n//       email: '',\n//       text2: '',\n//       text3: '',\n//     });\n\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\n\n//   const [generatedUrls, setGeneratedUrls] = useState('');\n\n//   const preRef = useRef(null);\n\n//   const isUrlValid = (userInput) => {\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n//     return res !== null;\n//   };\n\n//   const handleDownloadPDF = () => {\n//     const element = preRef.current; \n//     const pdfOptions = {\n//       margin: 10,\n//       filename: 'output.pdf',\n//       image: { type: 'jpeg', quality: 0.98 },\n//       html2canvas: { scale: 2 },\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n//     };\n\n//     html2pdf(element, pdfOptions);\n//   };\n\n//   const downloadurlPDF = async () => {   \n//     const element = document.querySelector('.url-list');\n//     const pdfOptions = {\n//       margin: 10,\n//       filename: 'output1.pdf',\n//       image: { type: 'jpeg', quality: 0.98 },\n//       html2canvas: { scale: 2 },\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n\n//     };\n//     html2pdf().from(element).set(pdfOptions).save();\n\n//   };\n\n//   const handleStart = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:1000/scraper', { url: formData.email });\n\n//       const listContent = response.data.urls.join('\\n');\n\n//       setGeneratedUrls(listContent);\n//       handleNext();\n//     } catch (error) {\n//       console.error('Error generating list of URLs:', error);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n\n//     if (name === 'email') {\n//       setShowUrlWarning(!isUrlValid(value));\n\n//     }\n\n//     setFormData((prevData) => ({\n//         ...prevData,\n//         [name]: value,\n//       }));\n\n//   };\n\n//   const handleNext = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\n//   };\n\n//   const handlePrevious = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\n//   };\n\n//   const handleSubmit2 = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:1000/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       }, {\n//         timeout: 5000, \n//       });\n\n//       console.log(response.data + '\\n');\n\n//       setOutput(response.data.tableString);\n//       handleNext();\n\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n\n//   };\n\n//   return (\n\n//   <div>\n//     <ProgressBar activeFieldset={activeFieldset} />\n//       <form id=\"msform\" onSubmit={handleSubmit2}>\n\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">Provide the Main URL</h2>\n//  \t\t    <h3 className=\"fs-subtitle\">This step will provide the list of all URLS</h3>\n//              <input\n//           type=\"text\"\n//           name=\"email\"\n//           placeholder=\"Main URL\"\n//           value={formData.email}\n//           onChange={handleInputChange}\n//         />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\n//         Extract\n//         </button>\n\n//         </Fieldset>\n//         <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">EXTRACTED URLS</h2>\n//         <div className=\"urls\">\n//         <pre ref={preRef} style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>\n//               {generatedUrls}\n//             </pre>\n//         </div>\n\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\n//         Previous\n//         </button>\n//         <button type=\"button\" className=\"next action-button\"  onClick={downloadurlPDF}>\n\n//         Download\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\"\n//           onClick={handleNext}\n//         >\n//         Next\n//         </button>\n//         </Fieldset>\n//        <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\n//         <input\n//         type=\"text\"\n//         value={urls}\n//         placeholder=\"Enter URL to scrape\"\n//         onChange={(e) => {\n//         setUrls(e.target.value);\n//         setShowUrlWarning(!isUrlValid(e.target.value));\n//         }}\n//       />\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\n//         Previous\n//         </button>\n//         <button\n//         type=\"submit\"\n//         className=\"submit action-button\"\n//         onClick={handleSubmit2}\n//         disabled={!urls || !selectors || showUrlWarning}>\n//         Submit\n//         </button>\n//         </Fieldset> \n\n//         <Fieldset style={{ display: activeFieldset === 4 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">EXTRACTED DATA</h2>\n//         <div className=\"result\">\n//           <pre ref={preRef}>{output}</pre>\n//         </div>\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\n//           Previous\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\"\n//           onClick={handleDownloadPDF}\n//             disabled={!output.trim()}\n//         >\n//           Download\n//         </button>\n//       </Fieldset>\n\n//     </form>\n//     </div>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n//..................................................\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './form.css';\nimport * as html2pdf from 'html2pdf.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = ({\n  activeFieldset\n}) => /*#__PURE__*/_jsxDEV(\"ul\", {\n  id: \"progressbar\",\n  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 1 ? 'active' : '',\n    children: \"URL EXTRACTION\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 2 ? 'active' : '',\n    children: \"EXTRACTED URLS\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 3 ? 'active' : '',\n    children: \"SCRAPING\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 393,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 4 ? 'active' : '',\n    children: \"EXTRACTED DATA\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 390,\n  columnNumber: 5\n}, this);\n_c = ProgressBar;\nconst Fieldset = ({\n  title,\n  subtitle,\n  children,\n  style\n}) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n  style: style,\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"fs-title\",\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"fs-subtitle\",\n    children: subtitle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 7\n  }, this), children]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 400,\n  columnNumber: 5\n}, this);\n_c2 = Fieldset;\nconst ScraperForm = () => {\n  _s();\n  const [activeFieldset, setActiveFieldset] = useState(1);\n  const [formData, setFormData] = useState({\n    email: '',\n    text2: '',\n    text3: ''\n  });\n  const [url, setUrl] = useState('');\n  const [urls, setUrls] = useState('');\n  const [data, setData] = useState([]);\n  const [displayUrls, setDisplayUrls] = useState(false);\n  const [selectors, setSelectors] = useState('');\n  const [output, setOutput] = useState('');\n  const [showUrlWarning, setShowUrlWarning] = useState(false);\n\n  // const [generatedUrls, setGeneratedUrls] = useState('');\n\n  const preRef = useRef(null);\n  const isUrlValid = userInput => {\n    const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n    return res !== null;\n  };\n  const handleDownloadPDF = () => {\n    const element = preRef.current;\n    const pdfOptions = {\n      margin: 10,\n      filename: 'output.pdf',\n      image: {\n        type: 'jpeg',\n        quality: 0.98\n      },\n      html2canvas: {\n        scale: 2\n      },\n      jsPDF: {\n        unit: 'mm',\n        format: 'a4',\n        orientation: 'portrait'\n      }\n    };\n    html2pdf(element, pdfOptions);\n  };\n  useEffect(() => {\n    if (url.trim() !== '') {\n      try {\n        axios.get('http://localhost:5100/urls').then(res => {\n          setData(res.data.urls || []);\n          setDisplayUrls(true);\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n  });\n  const downloadurlPDF = async () => {\n    const element = document.querySelector('.url-list');\n    const pdfOptions = {\n      margin: 10,\n      filename: 'output1.pdf',\n      image: {\n        type: 'jpeg',\n        quality: 0.98\n      },\n      html2canvas: {\n        scale: 2\n      },\n      jsPDF: {\n        unit: 'mm',\n        format: 'a4',\n        orientation: 'portrait'\n      }\n    };\n    html2pdf().from(element).set(pdfOptions).save();\n  };\n  const handleStart = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5100/scraper', {\n        url\n      });\n      console.log(\"Response:\", response);\n      const scrapedUrls = response.data.urls || [];\n      setData(scrapedUrls);\n      setDisplayUrls(true);\n      setOutput(response.data.urls);\n    } catch (error) {\n      console.error('Error scraping URL:', error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'email') {\n      setShowUrlWarning(!isUrlValid(value));\n    }\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleNext = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset + 1);\n  };\n  const handlePrevious = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset - 1);\n  };\n  const handleSubmit2 = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5100/scrape', {\n        urls: urls.split(',').map(url => url.trim()),\n        selectors: selectors.split(',').map(selector => selector.trim())\n      }, {\n        timeout: 5000\n      });\n      console.log(response.data + '\\n');\n      setOutput(response.data.tableString);\n      handleNext();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      activeFieldset: activeFieldset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"msform\",\n      onSubmit: handleSubmit2,\n      children: [/*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 1 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"Provide the Main URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"fs-subtitle\",\n          children: \"This step will provide the list of all URLS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          placeholder: \"Main URL\",\n          value: formData.email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 14\n        }, this), showUrlWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Please enter a valid URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleStart,\n          children: \"Extract\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 2 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"EXTRACTED URLS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 9\n        }, this), displayUrls && /*#__PURE__*/_jsxDEV(\"div\", {\n          title: \"Extracted URLs\",\n          style: {\n            display: 'block'\n          },\n          className: \"url-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"List of URLs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"url-list\",\n            children: data.map((url, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"url-item\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: url,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                className: \"url-link\",\n                children: url\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 17\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: downloadurlPDF,\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 3 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"SCRAPING STAGE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"fs-subtitle\",\n          children: \"Enter the URL and the selector that you want to scrape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: urls,\n          placeholder: \"Enter URL to scrape\",\n          onChange: e => {\n            setUrls(e.target.value);\n            setShowUrlWarning(!isUrlValid(e.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Selectors\",\n          value: selectors,\n          onChange: e => setSelectors(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 9\n        }, this), showUrlWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Please enter a valid URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit action-button\",\n          onClick: handleSubmit2,\n          disabled: !urls || !selectors || showUrlWarning,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 4 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"EXTRACTED DATA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            ref: preRef,\n            children: output\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleDownloadPDF,\n          disabled: !output.trim(),\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 554,\n    columnNumber: 3\n  }, this);\n};\n_s(ScraperForm, \"z6J5YzWC9kLOny2VwHaF2ywhi1Y=\");\n_c3 = ScraperForm;\nexport default ScraperForm;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProgressBar\");\n$RefreshReg$(_c2, \"Fieldset\");\n$RefreshReg$(_c3, \"ScraperForm\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","html2pdf","jsxDEV","_jsxDEV","ProgressBar","activeFieldset","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","Fieldset","title","subtitle","style","_c2","ScraperForm","_s","setActiveFieldset","formData","setFormData","email","text2","text3","url","setUrl","urls","setUrls","data","setData","displayUrls","setDisplayUrls","selectors","setSelectors","output","setOutput","showUrlWarning","setShowUrlWarning","preRef","isUrlValid","userInput","res","match","handleDownloadPDF","element","current","pdfOptions","margin","filename","image","type","quality","html2canvas","scale","jsPDF","unit","format","orientation","trim","get","then","error","console","downloadurlPDF","document","querySelector","from","set","save","handleStart","e","preventDefault","response","post","log","scrapedUrls","handleInputChange","name","value","target","prevData","handleNext","prevActiveFieldset","handlePrevious","handleSubmit2","split","map","selector","timeout","tableString","onSubmit","display","placeholder","onChange","color","onClick","index","href","rel","disabled","ref","_c3","$RefreshReg$"],"sources":["C:/Users/PC/tryg/front/src/components/ScraperForm.js"],"sourcesContent":["// // src/components/ScraperForm.js\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//         const response = await axios.post('http://localhost:3011/scrape', {\r\n//             urls: urls.split(',').map((url) => url.trim()),\r\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//           });\r\n\r\n//       console.log(response.data); \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n// //save in stae and print as map\r\n\r\n//   return (\r\n//      <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         Enter URLs (comma-separated):\r\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Enter jQuery selectors (comma-separated):\r\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\">Submit</button>\r\n  \r\n//     </form>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n// --------------------------------\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:3015/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data);\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URLs (comma-separated):\r\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Enter jQuery selectors (comma-separated):\r\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {/* Display the output on the frontend */}\r\n//       <div>\r\n//         <h2>Output:</h2>\r\n//         <pre>{output}</pre>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n// ---------------------------------------------------------perfect\r\n\r\n\r\n\r\n\r\n// import React, { useState, useRef} from 'react';\r\n// import axios from 'axios';\r\n// import './form.css';\r\n// import * as html2pdf from 'html2pdf.js';\r\n\r\n\r\n// const ProgressBar = ({ activeFieldset }) => (\r\n//     <ul id=\"progressbar\">\r\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n//       <li className={activeFieldset === 2 ? 'active' : ''}>EXTRACTED URLS</li>\r\n//       <li className={activeFieldset === 3 ? 'active' : ''}>SCRAPING</li>\r\n//       <li className={activeFieldset === 4 ? 'active' : ''}>EXTRACTED DATA</li>\r\n//     </ul>\r\n//   );\r\n\r\n\r\n//   const Fieldset = ({ title, subtitle, children, style }) => (\r\n//     <fieldset style={style}>\r\n//       <h2 className=\"fs-title\">{title}</h2>\r\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n//       {children}\r\n//     </fieldset>\r\n//   );\r\n\r\n// const ScraperForm = () => {\r\n\r\n//     const [activeFieldset, setActiveFieldset] = useState(1);\r\n//     const [formData, setFormData] = useState({\r\n//       email: '',\r\n//       text2: '',\r\n//       text3: '',\r\n//     });\r\n\r\n\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n\r\n//   const [generatedUrls, setGeneratedUrls] = useState('');\r\n\r\n//   const preRef = useRef(null);\r\n\r\n\r\n//   const isUrlValid = (userInput) => {\r\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n//     return res !== null;\r\n//   };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n//   const handleDownloadPDF = () => {\r\n//     const element = preRef.current; \r\n//     const pdfOptions = {\r\n//       margin: 10,\r\n//       filename: 'output.pdf',\r\n//       image: { type: 'jpeg', quality: 0.98 },\r\n//       html2canvas: { scale: 2 },\r\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n//     };\r\n\r\n//     html2pdf(element, pdfOptions);\r\n//   };\r\n\r\n\r\n\r\n//   const downloadurlPDF = async () => {   \r\n//     const element = document.querySelector('.url-list');\r\n//     const pdfOptions = {\r\n//       margin: 10,\r\n//       filename: 'output1.pdf',\r\n//       image: { type: 'jpeg', quality: 0.98 },\r\n//       html2canvas: { scale: 2 },\r\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n       \r\n//     };\r\n//     html2pdf().from(element).set(pdfOptions).save();\r\n   \r\n//   };\r\n\r\n\r\n\r\n\r\n\r\n//   const handleStart = async (e) => {\r\n//     e.preventDefault();\r\n  \r\n//     try {\r\n//       const response = await axios.post('http://localhost:1000/scraper', { url: formData.email });\r\n      \r\n//       const listContent = response.data.urls.join('\\n');\r\n      \r\n//       setGeneratedUrls(listContent);\r\n//       handleNext();\r\n//     } catch (error) {\r\n//       console.error('Error generating list of URLs:', error);\r\n//     }\r\n//   };\r\n\r\n  \r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n\r\n//     if (name === 'email') {\r\n//       setShowUrlWarning(!isUrlValid(value));\r\n     \r\n//     }\r\n    \r\n//     setFormData((prevData) => ({\r\n//         ...prevData,\r\n//         [name]: value,\r\n//       }));\r\n\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n//   };\r\n\r\n//   const handlePrevious = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleSubmit2 = async (e) => {\r\n//     e.preventDefault();\r\n\r\n \r\n//     try {\r\n//       const response = await axios.post('http://localhost:1000/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       }, {\r\n//         timeout: 5000, \r\n//       });\r\n\r\n//       console.log(response.data + '\\n');\r\n\r\n \r\n//       setOutput(response.data.tableString);\r\n//       handleNext();\r\n\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n   \r\n//   };\r\n\r\n//   return (\r\n\r\n//   <div>\r\n//     <ProgressBar activeFieldset={activeFieldset} />\r\n//       <form id=\"msform\" onSubmit={handleSubmit2}>\r\n\r\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">Provide the Main URL</h2>\r\n//  \t\t    <h3 className=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n//              <input\r\n//           type=\"text\"\r\n//           name=\"email\"\r\n//           placeholder=\"Main URL\"\r\n//           value={formData.email}\r\n//           onChange={handleInputChange}\r\n//         />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n\r\n        \r\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n//         Extract\r\n//         </button>\r\n        \r\n   \r\n//         </Fieldset>\r\n//         <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">EXTRACTED URLS</h2>\r\n//         <div className=\"urls\">\r\n//         <pre ref={preRef} style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>\r\n//               {generatedUrls}\r\n//             </pre>\r\n//         </div>\r\n\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n//         Previous\r\n//         </button>\r\n//         <button type=\"button\" className=\"next action-button\"  onClick={downloadurlPDF}>\r\n           \r\n//         Download\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\"\r\n//           onClick={handleNext}\r\n//         >\r\n//         Next\r\n//         </button>\r\n//         </Fieldset>\r\n//        <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n//         <input\r\n//         type=\"text\"\r\n//         value={urls}\r\n//         placeholder=\"Enter URL to scrape\"\r\n//         onChange={(e) => {\r\n//         setUrls(e.target.value);\r\n//         setShowUrlWarning(!isUrlValid(e.target.value));\r\n//         }}\r\n//       />\r\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n//         Previous\r\n//         </button>\r\n//         <button\r\n//         type=\"submit\"\r\n//         className=\"submit action-button\"\r\n//         onClick={handleSubmit2}\r\n//         disabled={!urls || !selectors || showUrlWarning}>\r\n//         Submit\r\n//         </button>\r\n//         </Fieldset> \r\n\r\n     \r\n//         <Fieldset style={{ display: activeFieldset === 4 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n//         <div className=\"result\">\r\n//           <pre ref={preRef}>{output}</pre>\r\n//         </div>\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n//           Previous\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\"\r\n//           onClick={handleDownloadPDF}\r\n//             disabled={!output.trim()}\r\n//         >\r\n//           Download\r\n//         </button>\r\n//       </Fieldset>\r\n\r\n      \r\n\r\n//     </form>\r\n//     </div>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//..................................................\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useRef, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport './form.css';\r\nimport * as html2pdf from 'html2pdf.js';\r\n\r\n\r\nconst ProgressBar = ({ activeFieldset }) => (\r\n    <ul id=\"progressbar\">\r\n      <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n      <li className={activeFieldset === 2 ? 'active' : ''}>EXTRACTED URLS</li>\r\n      <li className={activeFieldset === 3 ? 'active' : ''}>SCRAPING</li>\r\n      <li className={activeFieldset === 4 ? 'active' : ''}>EXTRACTED DATA</li>\r\n    </ul>\r\n  );\r\n\r\n\r\n  const Fieldset = ({ title, subtitle, children, style }) => (\r\n    <fieldset style={style}>\r\n      <h2 className=\"fs-title\">{title}</h2>\r\n      <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n      {children}\r\n    </fieldset>\r\n  );\r\n\r\nconst ScraperForm = () => {\r\n\r\n    const [activeFieldset, setActiveFieldset] = useState(1);\r\n    const [formData, setFormData] = useState({\r\n      email: '',\r\n      text2: '',\r\n      text3: '',\r\n    });\r\n\r\n  const [url, setUrl] = useState('');\r\n  const [urls, setUrls] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const [displayUrls, setDisplayUrls] = useState(false);\r\n  const [selectors, setSelectors] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n\r\n  // const [generatedUrls, setGeneratedUrls] = useState('');\r\n\r\n  const preRef = useRef(null);\r\n\r\n\r\n  const isUrlValid = (userInput) => {\r\n    const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n    return res !== null;\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  const handleDownloadPDF = () => {\r\n    const element = preRef.current; \r\n    const pdfOptions = {\r\n      margin: 10,\r\n      filename: 'output.pdf',\r\n      image: { type: 'jpeg', quality: 0.98 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n    };\r\n\r\n    html2pdf(element, pdfOptions);\r\n  };\r\n\r\n\r\n  useEffect(()=>{   \r\n             \r\n    if (url.trim() !== ''){\r\n    try{\r\n    axios.get('http://localhost:5100/urls')\r\n    .then((res)=>{\r\n      setData(res.data.urls||[]);\r\n      setDisplayUrls(true);\r\n    })\r\n  }catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n        }    \r\n  })\r\n\r\n  const downloadurlPDF = async () => {   \r\n    const element = document.querySelector('.url-list');\r\n    const pdfOptions = {\r\n      margin: 10,\r\n      filename: 'output1.pdf',\r\n      image: { type: 'jpeg', quality: 0.98 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n       \r\n    };\r\n    html2pdf().from(element).set(pdfOptions).save();\r\n   \r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const handleStart = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:5100/scraper', { url });\r\n      console.log(\"Response:\", response);\r\n      const scrapedUrls = response.data.urls || [];\r\n      setData(scrapedUrls);\r\n      setDisplayUrls(true);\r\n      setOutput(response.data.urls);\r\n    } catch (error) {\r\n      console.error('Error scraping URL:', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === 'email') {\r\n      setShowUrlWarning(!isUrlValid(value));\r\n     \r\n    }\r\n    \r\n    setFormData((prevData) => ({\r\n        ...prevData,\r\n        [name]: value,\r\n      }));\r\n\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleSubmit2 = async (e) => {\r\n    e.preventDefault();\r\n\r\n \r\n    try {\r\n      const response = await axios.post('http://localhost:5100/scrape', {\r\n        urls: urls.split(',').map((url) => url.trim()),\r\n        selectors: selectors.split(',').map((selector) => selector.trim()),\r\n      }, {\r\n        timeout: 5000, \r\n      });\r\n\r\n      console.log(response.data + '\\n');\r\n\r\n \r\n      setOutput(response.data.tableString);\r\n      handleNext();\r\n\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n   \r\n  };\r\n\r\n  return (\r\n\r\n  <div>\r\n    <ProgressBar activeFieldset={activeFieldset} />\r\n      <form id=\"msform\" onSubmit={handleSubmit2}>\r\n\r\n        <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n        <h2 className=\"fs-title\">Provide the Main URL</h2>\r\n \t\t    <h3 className=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n             <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Main URL\"\r\n          value={formData.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n\r\n        \r\n        <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n        Extract\r\n        </button>\r\n        \r\n   \r\n        </Fieldset>\r\n        <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n        <h2 className=\"fs-title\">EXTRACTED URLS</h2>\r\n        {displayUrls && (\r\n          <div title=\"Extracted URLs\" style={{ display: 'block' }} className=\"url-container\">\r\n            <h2>List of URLs:</h2>\r\n            <ul className=\"url-list\">\r\n              {data.map((url, index) => (\r\n                <li key={index} className=\"url-item\">\r\n                <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"url-link\">{url}</a>\r\n        </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        \r\n\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n        Previous\r\n        </button>\r\n        <button type=\"button\" className=\"next action-button\"  onClick={downloadurlPDF}>\r\n           \r\n        Download\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"next action-button\"\r\n          onClick={handleNext}\r\n        >\r\n        Next\r\n        </button>\r\n        </Fieldset>\r\n       <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n       <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n        <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n        <input\r\n        type=\"text\"\r\n        value={urls}\r\n        placeholder=\"Enter URL to scrape\"\r\n        onChange={(e) => {\r\n        setUrls(e.target.value);\r\n        setShowUrlWarning(!isUrlValid(e.target.value));\r\n        }}\r\n      />\r\n        <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n        {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n        Previous\r\n        </button>\r\n        <button\r\n        type=\"submit\"\r\n        className=\"submit action-button\"\r\n        onClick={handleSubmit2}\r\n        disabled={!urls || !selectors || showUrlWarning}>\r\n        Submit\r\n        </button>\r\n        </Fieldset> \r\n\r\n     \r\n        <Fieldset style={{ display: activeFieldset === 4 ? 'block' : 'none' }}>\r\n        <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n        <div className=\"result\">\r\n          <pre ref={preRef}>{output}</pre>\r\n        </div>\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n          Previous\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"next action-button\"\r\n          onClick={handleDownloadPDF}\r\n            disabled={!output.trim()}\r\n        >\r\n          Download\r\n        </button>\r\n      </Fieldset>\r\n\r\n      \r\n\r\n    </form>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default ScraperForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAKA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAMA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}