{"ast":null,"code":"// // src/components/ScraperForm.js\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//         const response = await axios.post('http://localhost:3011/scrape', {\n//             urls: urls.split(',').map((url) => url.trim()),\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\n//           });\n\n//       console.log(response.data); \n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n// //save in stae and print as map\n\n//   return (\n//      <form onSubmit={handleSubmit}>\n//       <label>\n//         Enter URLs (comma-separated):\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//       </label>\n//       <br />\n//       <label>\n//         Enter jQuery selectors (comma-separated):\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//       </label>\n//       <br />\n//       <button type=\"submit\">Submit</button>\n\n//     </form>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// --------------------------------\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:3015/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data);\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Enter URLs (comma-separated):\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//         </label>\n//         <br />\n//         <label>\n//           Enter jQuery selectors (comma-separated):\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {/* Display the output on the frontend */}\n//       <div>\n//         <h2>Output:</h2>\n//         <pre>{output}</pre>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ScraperForm;\n\n// ---------------------------------------------------------perfect\n\n// import React, { useState, useRef} from 'react';\n// import axios from 'axios';\n// import './form.css';\n// import * as html2pdf from 'html2pdf.js';\n\n// const ProgressBar = ({ activeFieldset }) => (\n//     <ul id=\"progressbar\">\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\n//       <li className={activeFieldset === 2 ? 'active' : ''}>EXTRACTED URLS</li>\n//       <li className={activeFieldset === 3 ? 'active' : ''}>SCRAPING</li>\n//       <li className={activeFieldset === 4 ? 'active' : ''}>EXTRACTED DATA</li>\n//     </ul>\n//   );\n\n//   const Fieldset = ({ title, subtitle, children, style }) => (\n//     <fieldset style={style}>\n//       <h2 className=\"fs-title\">{title}</h2>\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\n//       {children}\n//     </fieldset>\n//   );\n\n// const ScraperForm = () => {\n\n//     const [activeFieldset, setActiveFieldset] = useState(1);\n//     const [formData, setFormData] = useState({\n//       email: '',\n//       text2: '',\n//       text3: '',\n//     });\n\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\n\n//   const [generatedUrls, setGeneratedUrls] = useState('');\n\n//   const preRef = useRef(null);\n\n//   const isUrlValid = (userInput) => {\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n//     return res !== null;\n//   };\n\n//   const handleDownloadPDF = () => {\n//     const element = preRef.current; \n//     const pdfOptions = {\n//       margin: 10,\n//       filename: 'output.pdf',\n//       image: { type: 'jpeg', quality: 0.98 },\n//       html2canvas: { scale: 2 },\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n//     };\n\n//     html2pdf(element, pdfOptions);\n//   };\n\n//   const downloadurlPDF = async () => {   \n//     const element = document.querySelector('.url-list');\n//     const pdfOptions = {\n//       margin: 10,\n//       filename: 'output1.pdf',\n//       image: { type: 'jpeg', quality: 0.98 },\n//       html2canvas: { scale: 2 },\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n\n//     };\n//     html2pdf().from(element).set(pdfOptions).save();\n\n//   };\n\n//   const handleStart = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:1000/scraper', { url: formData.email });\n\n//       const listContent = response.data.urls.join('\\n');\n\n//       setGeneratedUrls(listContent);\n//       handleNext();\n//     } catch (error) {\n//       console.error('Error generating list of URLs:', error);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n\n//     if (name === 'email') {\n//       setShowUrlWarning(!isUrlValid(value));\n\n//     }\n\n//     setFormData((prevData) => ({\n//         ...prevData,\n//         [name]: value,\n//       }));\n\n//   };\n\n//   const handleNext = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\n//   };\n\n//   const handlePrevious = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\n//   };\n\n//   const handleSubmit2 = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:1000/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       }, {\n//         timeout: 5000, \n//       });\n\n//       console.log(response.data + '\\n');\n\n//       setOutput(response.data.tableString);\n//       handleNext();\n\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n\n//   };\n\n//   return (\n\n//   <div>\n//     <ProgressBar activeFieldset={activeFieldset} />\n//       <form id=\"msform\" onSubmit={handleSubmit2}>\n\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">Provide the Main URL</h2>\n//  \t\t    <h3 className=\"fs-subtitle\">This step will provide the list of all URLS</h3>\n//              <input\n//           type=\"text\"\n//           name=\"email\"\n//           placeholder=\"Main URL\"\n//           value={formData.email}\n//           onChange={handleInputChange}\n//         />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\n//         Extract\n//         </button>\n\n//         </Fieldset>\n//         <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">EXTRACTED URLS</h2>\n//         <div className=\"urls\">\n//         <pre ref={preRef} style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>\n//               {generatedUrls}\n//             </pre>\n//         </div>\n\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\n//         Previous\n//         </button>\n//         <button type=\"button\" className=\"next action-button\"  onClick={downloadurlPDF}>\n\n//         Download\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\"\n//           onClick={handleNext}\n//         >\n//         Next\n//         </button>\n//         </Fieldset>\n//        <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\n//         <input\n//         type=\"text\"\n//         value={urls}\n//         placeholder=\"Enter URL to scrape\"\n//         onChange={(e) => {\n//         setUrls(e.target.value);\n//         setShowUrlWarning(!isUrlValid(e.target.value));\n//         }}\n//       />\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\n//         Previous\n//         </button>\n//         <button\n//         type=\"submit\"\n//         className=\"submit action-button\"\n//         onClick={handleSubmit2}\n//         disabled={!urls || !selectors || showUrlWarning}>\n//         Submit\n//         </button>\n//         </Fieldset> \n\n//         <Fieldset style={{ display: activeFieldset === 4 ? 'block' : 'none' }}>\n//         <h2 className=\"fs-title\">EXTRACTED DATA</h2>\n//         <div className=\"result\">\n//           <pre ref={preRef}>{output}</pre>\n//         </div>\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\n//           Previous\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\"\n//           onClick={handleDownloadPDF}\n//             disabled={!output.trim()}\n//         >\n//           Download\n//         </button>\n//       </Fieldset>\n\n//     </form>\n//     </div>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n//..................................................","map":{"version":3,"names":[],"sources":["C:/Users/PC/tryg/front/src/components/ScraperForm.js"],"sourcesContent":["// // src/components/ScraperForm.js\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//         const response = await axios.post('http://localhost:3011/scrape', {\r\n//             urls: urls.split(',').map((url) => url.trim()),\r\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//           });\r\n\r\n//       console.log(response.data); \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n// //save in stae and print as map\r\n\r\n//   return (\r\n//      <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         Enter URLs (comma-separated):\r\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Enter jQuery selectors (comma-separated):\r\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\">Submit</button>\r\n  \r\n//     </form>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n// --------------------------------\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:3015/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data);\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URLs (comma-separated):\r\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Enter jQuery selectors (comma-separated):\r\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {/* Display the output on the frontend */}\r\n//       <div>\r\n//         <h2>Output:</h2>\r\n//         <pre>{output}</pre>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n// ---------------------------------------------------------perfect\r\n\r\n\r\n\r\n\r\n// import React, { useState, useRef} from 'react';\r\n// import axios from 'axios';\r\n// import './form.css';\r\n// import * as html2pdf from 'html2pdf.js';\r\n\r\n\r\n// const ProgressBar = ({ activeFieldset }) => (\r\n//     <ul id=\"progressbar\">\r\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n//       <li className={activeFieldset === 2 ? 'active' : ''}>EXTRACTED URLS</li>\r\n//       <li className={activeFieldset === 3 ? 'active' : ''}>SCRAPING</li>\r\n//       <li className={activeFieldset === 4 ? 'active' : ''}>EXTRACTED DATA</li>\r\n//     </ul>\r\n//   );\r\n\r\n\r\n//   const Fieldset = ({ title, subtitle, children, style }) => (\r\n//     <fieldset style={style}>\r\n//       <h2 className=\"fs-title\">{title}</h2>\r\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n//       {children}\r\n//     </fieldset>\r\n//   );\r\n\r\n// const ScraperForm = () => {\r\n\r\n//     const [activeFieldset, setActiveFieldset] = useState(1);\r\n//     const [formData, setFormData] = useState({\r\n//       email: '',\r\n//       text2: '',\r\n//       text3: '',\r\n//     });\r\n\r\n\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n\r\n//   const [generatedUrls, setGeneratedUrls] = useState('');\r\n\r\n//   const preRef = useRef(null);\r\n\r\n\r\n//   const isUrlValid = (userInput) => {\r\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n//     return res !== null;\r\n//   };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n//   const handleDownloadPDF = () => {\r\n//     const element = preRef.current; \r\n//     const pdfOptions = {\r\n//       margin: 10,\r\n//       filename: 'output.pdf',\r\n//       image: { type: 'jpeg', quality: 0.98 },\r\n//       html2canvas: { scale: 2 },\r\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n//     };\r\n\r\n//     html2pdf(element, pdfOptions);\r\n//   };\r\n\r\n\r\n\r\n//   const downloadurlPDF = async () => {   \r\n//     const element = document.querySelector('.url-list');\r\n//     const pdfOptions = {\r\n//       margin: 10,\r\n//       filename: 'output1.pdf',\r\n//       image: { type: 'jpeg', quality: 0.98 },\r\n//       html2canvas: { scale: 2 },\r\n//       jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\r\n       \r\n//     };\r\n//     html2pdf().from(element).set(pdfOptions).save();\r\n   \r\n//   };\r\n\r\n\r\n\r\n\r\n\r\n//   const handleStart = async (e) => {\r\n//     e.preventDefault();\r\n  \r\n//     try {\r\n//       const response = await axios.post('http://localhost:1000/scraper', { url: formData.email });\r\n      \r\n//       const listContent = response.data.urls.join('\\n');\r\n      \r\n//       setGeneratedUrls(listContent);\r\n//       handleNext();\r\n//     } catch (error) {\r\n//       console.error('Error generating list of URLs:', error);\r\n//     }\r\n//   };\r\n\r\n  \r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n\r\n//     if (name === 'email') {\r\n//       setShowUrlWarning(!isUrlValid(value));\r\n     \r\n//     }\r\n    \r\n//     setFormData((prevData) => ({\r\n//         ...prevData,\r\n//         [name]: value,\r\n//       }));\r\n\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n//   };\r\n\r\n//   const handlePrevious = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleSubmit2 = async (e) => {\r\n//     e.preventDefault();\r\n\r\n \r\n//     try {\r\n//       const response = await axios.post('http://localhost:1000/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       }, {\r\n//         timeout: 5000, \r\n//       });\r\n\r\n//       console.log(response.data + '\\n');\r\n\r\n \r\n//       setOutput(response.data.tableString);\r\n//       handleNext();\r\n\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n   \r\n//   };\r\n\r\n//   return (\r\n\r\n//   <div>\r\n//     <ProgressBar activeFieldset={activeFieldset} />\r\n//       <form id=\"msform\" onSubmit={handleSubmit2}>\r\n\r\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">Provide the Main URL</h2>\r\n//  \t\t    <h3 className=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n//              <input\r\n//           type=\"text\"\r\n//           name=\"email\"\r\n//           placeholder=\"Main URL\"\r\n//           value={formData.email}\r\n//           onChange={handleInputChange}\r\n//         />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n\r\n        \r\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n//         Extract\r\n//         </button>\r\n        \r\n   \r\n//         </Fieldset>\r\n//         <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">EXTRACTED URLS</h2>\r\n//         <div className=\"urls\">\r\n//         <pre ref={preRef} style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>\r\n//               {generatedUrls}\r\n//             </pre>\r\n//         </div>\r\n\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n//         Previous\r\n//         </button>\r\n//         <button type=\"button\" className=\"next action-button\"  onClick={downloadurlPDF}>\r\n           \r\n//         Download\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\"\r\n//           onClick={handleNext}\r\n//         >\r\n//         Next\r\n//         </button>\r\n//         </Fieldset>\r\n//        <Fieldset style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n//         <input\r\n//         type=\"text\"\r\n//         value={urls}\r\n//         placeholder=\"Enter URL to scrape\"\r\n//         onChange={(e) => {\r\n//         setUrls(e.target.value);\r\n//         setShowUrlWarning(!isUrlValid(e.target.value));\r\n//         }}\r\n//       />\r\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n//         Previous\r\n//         </button>\r\n//         <button\r\n//         type=\"submit\"\r\n//         className=\"submit action-button\"\r\n//         onClick={handleSubmit2}\r\n//         disabled={!urls || !selectors || showUrlWarning}>\r\n//         Submit\r\n//         </button>\r\n//         </Fieldset> \r\n\r\n     \r\n//         <Fieldset style={{ display: activeFieldset === 4 ? 'block' : 'none' }}>\r\n//         <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n//         <div className=\"result\">\r\n//           <pre ref={preRef}>{output}</pre>\r\n//         </div>\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n//           Previous\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\"\r\n//           onClick={handleDownloadPDF}\r\n//             disabled={!output.trim()}\r\n//         >\r\n//           Download\r\n//         </button>\r\n//       </Fieldset>\r\n\r\n      \r\n\r\n//     </form>\r\n//     </div>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//..................................................\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAKA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAMA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAWA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}