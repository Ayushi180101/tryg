{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\tryg\\\\front\\\\src\\\\components\\\\ScraperForm.js\",\n  _s = $RefreshSig$();\n// // src/components/ScraperForm.js\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//         const response = await axios.post('http://localhost:3011/scrape', {\n//             urls: urls.split(',').map((url) => url.trim()),\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\n//           });\n\n//       console.log(response.data); \n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n// //save in stae and print as map\n\n//   return (\n//      <form onSubmit={handleSubmit}>\n//       <label>\n//         Enter URLs (comma-separated):\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//       </label>\n//       <br />\n//       <label>\n//         Enter jQuery selectors (comma-separated):\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//       </label>\n//       <br />\n//       <button type=\"submit\">Submit</button>\n\n//     </form>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// --------------------------------\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:3015/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data);\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Enter URLs (comma-separated):\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//         </label>\n//         <br />\n//         <label>\n//           Enter jQuery selectors (comma-separated):\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {/* Display the output on the frontend */}\n//       <div>\n//         <h2>Output:</h2>\n//         <pre>{output}</pre>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ScraperForm;\n\n// ---------------------------------------------------------perfect\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './form.css';\n\n// const ProgressBar = ({ activeFieldset }) => (\n//     <ul id=\"progressbar\">\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\n//       <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\n//       <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\n//     </ul>\n//   );\n\n//   const Fieldset = ({ title, subtitle, children, style }) => (\n//     <fieldset style={style}>\n//       <h2 className=\"fs-title\">{title}</h2>\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\n//       {children}\n//     </fieldset>\n//   );\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScraperForm = () => {\n  _s();\n  // const [activeFieldset, setActiveFieldset] = useState(1);\n\n  // const [formData, setFormData] = useState({\n  //   email: '',\n  //   text2: '',\n  //   text3: '',\n  // });\n\n  const [urls, setUrls] = useState('');\n  const [selectors, setSelectors] = useState('');\n  const [output, setOutput] = useState('');\n\n  //   const downloadPDF = async () => {\n  //     try {\n  //       const response = await fetch('http://localhost:5000/generate-pdf');\n  //       const blob = await response.blob();\n  //       const url = window.URL.createObjectURL(blob);\n  //       const link = document.createElement('a');\n  //       link.href = url;\n  //       link.setAttribute('download', 'data.pdf');\n  //       document.body.appendChild(link);\n  //       link.click();\n  //       link.parentNode.removeChild(link);\n  //     } catch (error) {\n  //       console.error('Error downloading PDF:', error);\n  //     }\n  //   };\n\n  //   const handleStart = async (e) => {\n  //     e.preventDefault();\n\n  //     try{\n  //       const response = await axios.post('http://localhost:5000/scraper', { url });\n  //       setUrls(response.data.urls || []);\n  //     } catch (error) {\n  //       console.error('Error scraping URL:', error);\n  //     }\n  //   }\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleNext = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset + 1);\n  };\n  const handlePrevious = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset - 1);\n  };\n  const handleSubmit2 = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5001/scrape', {\n        urls: urls.split(',').map(url => url.trim()),\n        selectors: selectors.split(',').map(selector => selector.trim())\n      });\n      console.log(response.data);\n\n      // Set the output in the state to be displayed on the frontend\n      setOutput(response.data.tableString);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"msform\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        activeFieldset: activeFieldset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 1 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"fs-title\",\n          children: \"Provide the Main URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          class: \"fs-subtitle\",\n          children: \"This step will provide the list of all URLS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          placeholder: \"Main URL\",\n          value: formData.email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: downloadPDF,\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleNext,\n          disabled: !formData.email.trim(),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 2 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"SCRAPING STAGE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"fs-subtitle\",\n          children: \"Enter the URL and the selector that you want to scrape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: urls,\n          onChange: e => setUrls(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectors,\n          onChange: e => setSelectors(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit action-button\",\n          onClick: handleSubmit2,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Output:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: output\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 8\n      }, this), activeFieldset === 3 && /*#__PURE__*/_jsxDEV(Fieldset, {\n        title: \"Extraction Results\",\n        style: {\n          display: 'block'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this), displayExtractedContent && /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: extractedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(ScraperForm, \"VVosENn0FknEJ45+7kJfjowfr5M=\");\n_c = ScraperForm;\nexport default ScraperForm;\nvar _c;\n$RefreshReg$(_c, \"ScraperForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ScraperForm","_s","urls","setUrls","selectors","setSelectors","output","setOutput","handleInputChange","e","name","value","target","setFormData","prevData","handleNext","setActiveFieldset","prevActiveFieldset","handlePrevious","handleSubmit2","preventDefault","response","post","split","map","url","trim","selector","console","log","data","tableString","error","children","id","ProgressBar","activeFieldset","fileName","_jsxFileName","lineNumber","columnNumber","Fieldset","style","display","class","type","placeholder","formData","email","onChange","className","onClick","handleStart","downloadPDF","disabled","title","displayExtractedContent","extractedContent","_c","$RefreshReg$"],"sources":["C:/Users/PC/tryg/front/src/components/ScraperForm.js"],"sourcesContent":["// // src/components/ScraperForm.js\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//         const response = await axios.post('http://localhost:3011/scrape', {\r\n//             urls: urls.split(',').map((url) => url.trim()),\r\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//           });\r\n\r\n//       console.log(response.data); \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n// //save in stae and print as map\r\n\r\n//   return (\r\n//      <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         Enter URLs (comma-separated):\r\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Enter jQuery selectors (comma-separated):\r\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\">Submit</button>\r\n  \r\n//     </form>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n// --------------------------------\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:3015/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data);\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URLs (comma-separated):\r\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Enter jQuery selectors (comma-separated):\r\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {/* Display the output on the frontend */}\r\n//       <div>\r\n//         <h2>Output:</h2>\r\n//         <pre>{output}</pre>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n// ---------------------------------------------------------perfect\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './form.css';\r\n\r\n\r\n// const ProgressBar = ({ activeFieldset }) => (\r\n//     <ul id=\"progressbar\">\r\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n//       <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\r\n//       <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\r\n//     </ul>\r\n//   );\r\n  \r\n//   const Fieldset = ({ title, subtitle, children, style }) => (\r\n//     <fieldset style={style}>\r\n//       <h2 className=\"fs-title\">{title}</h2>\r\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n//       {children}\r\n//     </fieldset>\r\n//   );\r\n\r\nconst ScraperForm = () => {\r\n\r\n\r\n    // const [activeFieldset, setActiveFieldset] = useState(1);\r\n  \r\n    // const [formData, setFormData] = useState({\r\n    //   email: '',\r\n    //   text2: '',\r\n    //   text3: '',\r\n    // });\r\n\r\n\r\n  const [urls, setUrls] = useState('');\r\n  const [selectors, setSelectors] = useState('');\r\n  const [output, setOutput] = useState('');\r\n\r\n\r\n\r\n  \r\n\r\n//   const downloadPDF = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/generate-pdf');\r\n//       const blob = await response.blob();\r\n//       const url = window.URL.createObjectURL(blob);\r\n//       const link = document.createElement('a');\r\n//       link.href = url;\r\n//       link.setAttribute('download', 'data.pdf');\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//       link.parentNode.removeChild(link);\r\n//     } catch (error) {\r\n//       console.error('Error downloading PDF:', error);\r\n//     }\r\n//   };\r\n  \r\n  \r\n//   const handleStart = async (e) => {\r\n//     e.preventDefault();\r\n   \r\n   \r\n//     try{\r\n//       const response = await axios.post('http://localhost:5000/scraper', { url });\r\n//       setUrls(response.data.urls || []);\r\n//     } catch (error) {\r\n//       console.error('Error scraping URL:', error);\r\n//     }\r\n//   }\r\n\r\n  \r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  \r\n\r\n\r\n\r\n  const handleNext = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleSubmit2 = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5001/scrape', {\r\n        urls: urls.split(',').map((url) => url.trim()),\r\n        selectors: selectors.split(',').map((selector) => selector.trim()),\r\n      });\r\n\r\n      console.log(response.data);\r\n\r\n      // Set the output in the state to be displayed on the frontend\r\n      setOutput(response.data.tableString);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n      <form id=\"msform\"> \r\n        <ProgressBar activeFieldset={activeFieldset} />\r\n\r\n        <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n        <h2 class=\"fs-title\">Provide the Main URL</h2>\r\n \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n         <input\r\n  type=\"text\"\r\n  name=\"email\"\r\n  placeholder=\"Main URL\"\r\n  value={formData.email}\r\n  onChange={handleInputChange}\r\n/>\r\n\r\n          <button type=\"button\" className=\"next action-button\" onClick={handleStart} >\r\n            Start\r\n          </button>\r\n          \r\n          <button type=\"button\" className=\"next action-button\" onClick={downloadPDF} >\r\n            Download\r\n          </button>\r\n          <button type=\"button\" className=\"next action-button\" onClick={handleNext} disabled={!formData.email.trim()}>\r\n            Next\r\n          </button>\r\n        </Fieldset>\r\n\r\n       <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n       <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n        <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n        <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n        <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n          Previous\r\n        </button>\r\n        <button type=\"submit\" className=\"submit action-button\" onClick={handleSubmit2}>\r\n          Submit\r\n        </button>\r\n        <div>\r\n        <h2>Output:</h2>\r\n        <pre>{output}</pre>\r\n      </div>\r\n      \r\n      \r\n      {/* <form onSubmit={handleSubmit2}>\r\n         <label>\r\n          Enter URLs (comma-separated):\r\n           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n         </label>\r\n         <br />\r\n         <label>\r\n           Enter jQuery selectors (comma-separated):\r\n           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n         </label>\r\n         <br />\r\n         <button type=\"submit\">Submit</button>\r\n       </form> */}\r\n\r\n       \r\n      </Fieldset> \r\n\r\n      {activeFieldset === 3 && (\r\n      <Fieldset title=\"Extraction Results\" style={{ display: 'block' }}>\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n          Previous\r\n        </button>\r\n      {displayExtractedContent && <pre>{extractedContent}</pre>}\r\n      </Fieldset>\r\n      )}\r\n      \r\n\r\n    </form>\r\n    </div>\r\n    \r\n     \r\n\r\n\r\n  );\r\n};\r\n\r\nexport default ScraperForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}