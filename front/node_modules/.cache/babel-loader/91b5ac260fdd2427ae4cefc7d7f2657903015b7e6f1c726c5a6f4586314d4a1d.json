{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStorage = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst uuid_js_1 = require(\"../../../utils/uuid.js\");\nconst NetworkRequest_js_1 = require(\"./NetworkRequest.js\");\nconst NetworkUtils_js_1 = require(\"./NetworkUtils.js\");\n/** Stores network and intercept maps. */\nclass NetworkStorage {\n  #eventManager;\n  #logger;\n  #targets = new Set();\n  /**\n   * A map from network request ID to Network Request objects.\n   * Needed as long as information about requests comes from different events.\n   */\n  #requests = new Map();\n  /** A map from intercept ID to track active network intercepts. */\n  #intercepts = new Map();\n  #interceptionStages = {\n    request: false,\n    response: false,\n    auth: false\n  };\n  constructor(eventManager, browserClient, logger) {\n    this.#eventManager = eventManager;\n    browserClient.on('Target.detachedFromTarget', ({\n      sessionId\n    }) => {\n      this.disposeRequestMap(sessionId);\n    });\n    this.#logger = logger;\n  }\n  /**\n   * Gets the network request with the given ID, if any.\n   * Otherwise, creates a new network request with the given ID and cdp target.\n   */\n  #getOrCreateNetworkRequest(id, cdpTarget, redirectCount) {\n    let request = this.getRequestById(id);\n    if (request) {\n      return request;\n    }\n    request = new NetworkRequest_js_1.NetworkRequest(id, this.#eventManager, this, cdpTarget, redirectCount, this.#logger);\n    this.addRequest(request);\n    return request;\n  }\n  onCdpTargetCreated(cdpTarget) {\n    this.#targets.add(cdpTarget);\n    const cdpClient = cdpTarget.cdpClient;\n    // TODO: Wrap into object\n    const listeners = [['Network.requestWillBeSent', params => {\n      const request = this.getRequestById(params.requestId);\n      if (request && request.isRedirecting()) {\n        request.handleRedirect(params);\n        this.deleteRequest(params.requestId);\n        this.#getOrCreateNetworkRequest(params.requestId, cdpTarget, request.redirectCount + 1).onRequestWillBeSentEvent(params);\n      } else {\n        this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentEvent(params);\n      }\n    }], ['Network.requestWillBeSentExtraInfo', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentExtraInfoEvent(params);\n    }], ['Network.responseReceived', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedEvent(params);\n    }], ['Network.responseReceivedExtraInfo', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedExtraInfoEvent(params);\n    }], ['Network.requestServedFromCache', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onServedFromCache();\n    }], ['Network.loadingFailed', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onLoadingFailedEvent(params);\n    }], ['Fetch.requestPaused', event => {\n      this.#getOrCreateNetworkRequest(\n      // CDP quirk if the Network domain is not present this is undefined\n      event.networkId ?? event.requestId, cdpTarget).onRequestPaused(event);\n    }], ['Fetch.authRequired', event => {\n      let request = this.getRequestByFetchId(event.requestId);\n      if (!request) {\n        request = this.#getOrCreateNetworkRequest(event.requestId, cdpTarget);\n      }\n      request.onAuthRequired(event);\n    }]];\n    for (const [event, listener] of listeners) {\n      cdpClient.on(event, listener);\n    }\n  }\n  async toggleInterception() {\n    if (this.#intercepts.size) {\n      const stages = {\n        request: false,\n        response: false,\n        auth: false\n      };\n      for (const intercept of this.#intercepts.values()) {\n        stages.request ||= intercept.phases.includes(\"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */);\n        stages.response ||= intercept.phases.includes(\"responseStarted\" /* Network.InterceptPhase.ResponseStarted */);\n        stages.auth ||= intercept.phases.includes(\"authRequired\" /* Network.InterceptPhase.AuthRequired */);\n      }\n      const patterns = [];\n      if (this.#interceptionStages.request === stages.request && this.#interceptionStages.response === stages.response && this.#interceptionStages.auth === stages.auth) {\n        return;\n      }\n      this.#interceptionStages = stages;\n      // CDP quirk we need request interception when we intercept auth\n      if (stages.request || stages.auth) {\n        patterns.push({\n          urlPattern: '*',\n          requestStage: 'Request'\n        });\n      }\n      if (stages.response) {\n        patterns.push({\n          urlPattern: '*',\n          requestStage: 'Response'\n        });\n      }\n      // TODO: Don't enable on start as we will have\n      // no network interceptions at this time.\n      // Needed to enable fetch events.\n      await Promise.all([...this.#targets.values()].map(async cdpTarget => {\n        return await cdpTarget.enableFetchIfNeeded({\n          patterns,\n          handleAuthRequests: stages.auth\n        });\n      }));\n    } else {\n      this.#interceptionStages = {\n        request: false,\n        response: false,\n        auth: false\n      };\n      await Promise.all([...this.#targets.values()].map(target => {\n        return target.disableFetchIfNeeded();\n      }));\n    }\n  }\n  getInterceptsForPhase(request, phase) {\n    if (request.url === NetworkRequest_js_1.NetworkRequest.unknownParameter) {\n      return new Set();\n    }\n    const intercepts = new Set();\n    for (const [interceptId, intercept] of this.#intercepts.entries()) {\n      if (!intercept.phases.includes(phase)) {\n        continue;\n      }\n      if (intercept.urlPatterns.length === 0) {\n        intercepts.add(interceptId);\n        continue;\n      }\n      for (const pattern of intercept.urlPatterns) {\n        if ((0, NetworkUtils_js_1.matchUrlPattern)(pattern, request.url)) {\n          intercepts.add(interceptId);\n          break;\n        }\n      }\n    }\n    return intercepts;\n  }\n  disposeRequestMap(sessionId) {\n    for (const request of this.#requests.values()) {\n      if (request.cdpClient.sessionId === sessionId) {\n        this.#requests.delete(request.id);\n      }\n    }\n  }\n  /**\n   * Adds the given entry to the intercept map.\n   * URL patterns are assumed to be parsed.\n   *\n   * @return The intercept ID.\n   */\n  async addIntercept(value) {\n    const interceptId = (0, uuid_js_1.uuidv4)();\n    this.#intercepts.set(interceptId, value);\n    await this.toggleInterception();\n    return interceptId;\n  }\n  /**\n   * Removes the given intercept from the intercept map.\n   * Throws NoSuchInterceptException if the intercept does not exist.\n   */\n  async removeIntercept(intercept) {\n    if (!this.#intercepts.has(intercept)) {\n      throw new protocol_js_1.NoSuchInterceptException(`Intercept '${intercept}' does not exist.`);\n    }\n    this.#intercepts.delete(intercept);\n    await this.toggleInterception();\n  }\n  getRequestById(id) {\n    return this.#requests.get(id);\n  }\n  getRequestByFetchId(fetchId) {\n    for (const request of this.#requests.values()) {\n      if (request.fetchId === fetchId) {\n        return request;\n      }\n    }\n    return;\n  }\n  addRequest(request) {\n    this.#requests.set(request.id, request);\n  }\n  deleteRequest(id) {\n    this.#requests.delete(id);\n  }\n}\nexports.NetworkStorage = NetworkStorage;","map":{"version":3,"names":["protocol_js_1","require","uuid_js_1","NetworkRequest_js_1","NetworkUtils_js_1","NetworkStorage","eventManager","logger","targets","Set","requests","Map","intercepts","interceptionStages","request","response","auth","constructor","browserClient","on","sessionId","disposeRequestMap","getOrCreateNetworkRequest","#getOrCreateNetworkRequest","id","cdpTarget","redirectCount","getRequestById","NetworkRequest","addRequest","onCdpTargetCreated","add","cdpClient","listeners","params","requestId","isRedirecting","handleRedirect","deleteRequest","onRequestWillBeSentEvent","onRequestWillBeSentExtraInfoEvent","onResponseReceivedEvent","onResponseReceivedExtraInfoEvent","onServedFromCache","onLoadingFailedEvent","event","networkId","onRequestPaused","getRequestByFetchId","onAuthRequired","listener","toggleInterception","size","stages","intercept","values","phases","includes","patterns","push","urlPattern","requestStage","Promise","all","map","enableFetchIfNeeded","handleAuthRequests","target","disableFetchIfNeeded","getInterceptsForPhase","phase","url","unknownParameter","interceptId","entries","urlPatterns","length","pattern","matchUrlPattern","delete","addIntercept","value","uuidv4","set","removeIntercept","has","NoSuchInterceptException","get","fetchId","exports"],"sources":["../../../../../src/bidiMapper/domains/network/NetworkStorage.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}