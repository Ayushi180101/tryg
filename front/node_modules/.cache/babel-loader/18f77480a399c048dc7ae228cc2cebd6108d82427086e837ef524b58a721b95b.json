{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkProcessor = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst assert_js_1 = require(\"../../../utils/assert.js\");\nconst NetworkUtils_js_1 = require(\"./NetworkUtils.js\");\n/** Dispatches Network domain commands. */\nclass NetworkProcessor {\n  #browsingContextStorage;\n  #networkStorage;\n  constructor(browsingContextStorage, networkStorage) {\n    this.#browsingContextStorage = browsingContextStorage;\n    this.#networkStorage = networkStorage;\n  }\n  async addIntercept(params) {\n    // TODO: Use in intercepts\n    this.#browsingContextStorage.verifyContextsList(params.contexts);\n    const urlPatterns = params.urlPatterns ?? [];\n    const parsedUrlPatterns = NetworkProcessor.parseUrlPatterns(urlPatterns);\n    const intercept = await this.#networkStorage.addIntercept({\n      urlPatterns: parsedUrlPatterns,\n      phases: params.phases\n    });\n    return {\n      intercept\n    };\n  }\n  async continueRequest(params) {\n    const networkId = params.request;\n    if (params.url !== undefined) {\n      NetworkProcessor.parseUrlString(params.url);\n    }\n    const request = this.#getBlockedRequestOrFail(networkId, [\"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */]);\n    const {\n      url,\n      method,\n      headers\n    } = params;\n    // TODO: Set / expand.\n    // ; Step 9. cookies\n    // ; Step 10. body\n    const requestHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(headers);\n    await request.continueRequest(url, method, requestHeaders);\n    return {};\n  }\n  async continueResponse(params) {\n    const networkId = params.request;\n    const {\n      statusCode,\n      reasonPhrase,\n      headers\n    } = params;\n    const request = this.#getBlockedRequestOrFail(networkId, [\"responseStarted\" /* Network.InterceptPhase.ResponseStarted */]);\n    const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(headers);\n    // TODO: Set / expand.\n    // ; Step 10. cookies\n    // ; Step 11. credentials\n    await request.continueResponse({\n      responseCode: statusCode,\n      responsePhrase: reasonPhrase,\n      responseHeaders\n    });\n    return {};\n  }\n  async continueWithAuth(params) {\n    const networkId = params.request;\n    const request = this.#getBlockedRequestOrFail(networkId, [\"authRequired\" /* Network.InterceptPhase.AuthRequired */]);\n    let username;\n    let password;\n    if (params.action === 'provideCredentials') {\n      const {\n        credentials\n      } = params;\n      username = credentials.username;\n      password = credentials.password;\n      // TODO: This should be invalid argument exception.\n      // Spec may need to be updated.\n      (0, assert_js_1.assert)(credentials.type === 'password', `Credentials type ${credentials.type} must be 'password'`);\n    }\n    const response = (0, NetworkUtils_js_1.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction)(params.action);\n    await request.continueWithAuth({\n      response,\n      username,\n      password\n    });\n    return {};\n  }\n  async failRequest({\n    request: networkId\n  }) {\n    const request = this.#getRequestOrFail(networkId);\n    if (request.currentInterceptPhase === \"authRequired\" /* Network.InterceptPhase.AuthRequired */) {\n      throw new protocol_js_1.InvalidArgumentException(`Request '${networkId}' in 'authRequired' phase cannot be failed`);\n    }\n    if (!request.currentInterceptPhase) {\n      throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${networkId}'`);\n    }\n    await request.failRequest('Failed');\n    return {};\n  }\n  async provideResponse(params) {\n    const {\n      statusCode,\n      reasonPhrase,\n      headers,\n      body,\n      request: networkId\n    } = params;\n    // TODO: Step 6\n    // https://w3c.github.io/webdriver-bidi/#command-network-continueResponse\n    const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(headers);\n    // TODO: Set / expand.\n    // ; Step 10. cookies\n    // ; Step 11. credentials\n    const request = this.#getBlockedRequestOrFail(networkId, [\"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */, \"responseStarted\" /* Network.InterceptPhase.ResponseStarted */, \"authRequired\" /* Network.InterceptPhase.AuthRequired */]);\n    await request.provideResponse({\n      responseCode: statusCode ?? request.statusCode,\n      responsePhrase: reasonPhrase,\n      responseHeaders,\n      body: body?.value // TODO: Differ base64 / string\n    });\n    return {};\n  }\n  async removeIntercept(params) {\n    await this.#networkStorage.removeIntercept(params.intercept);\n    return {};\n  }\n  #getRequestOrFail(id) {\n    const request = this.#networkStorage.getRequestById(id);\n    if (!request) {\n      throw new protocol_js_1.NoSuchRequestException(`Network request with ID '${id}' doesn't exist`);\n    }\n    return request;\n  }\n  #getBlockedRequestOrFail(id, phases) {\n    const request = this.#getRequestOrFail(id);\n    if (!request.currentInterceptPhase) {\n      throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${id}'`);\n    }\n    if (request.currentInterceptPhase && !phases.includes(request.currentInterceptPhase)) {\n      throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${id}' is in '${request.currentInterceptPhase}' phase`);\n    }\n    return request;\n  }\n  /**\n   * Attempts to parse the given url.\n   * Throws an InvalidArgumentException if the url is invalid.\n   */\n  static parseUrlString(url) {\n    try {\n      return new URL(url);\n    } catch (error) {\n      throw new protocol_js_1.InvalidArgumentException(`Invalid URL '${url}': ${error}`);\n    }\n  }\n  static parseUrlPatterns(urlPatterns) {\n    return urlPatterns.map(urlPattern => {\n      switch (urlPattern.type) {\n        case 'string':\n          {\n            NetworkProcessor.parseUrlString(urlPattern.pattern);\n            return urlPattern;\n          }\n        case 'pattern':\n          // No params signifies intercept all\n          if (urlPattern.protocol === undefined && urlPattern.hostname === undefined && urlPattern.port === undefined && urlPattern.pathname === undefined && urlPattern.search === undefined) {\n            return urlPattern;\n          }\n          if (urlPattern.protocol === '') {\n            throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a protocol`);\n          }\n          if (urlPattern.hostname === '') {\n            throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a hostname`);\n          }\n          if ((urlPattern.hostname?.length ?? 0) > 0) {\n            if (urlPattern.protocol?.match(/^file/i)) {\n              throw new protocol_js_1.InvalidArgumentException(`URL pattern protocol cannot be 'file'`);\n            }\n            if (urlPattern.hostname?.includes(':')) {\n              throw new protocol_js_1.InvalidArgumentException(`URL pattern hostname must not contain a colon`);\n            }\n          }\n          if (urlPattern.port === '') {\n            throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a port`);\n          }\n          try {\n            new URL((0, NetworkUtils_js_1.buildUrlPatternString)(urlPattern));\n          } catch (error) {\n            throw new protocol_js_1.InvalidArgumentException(`${error}`);\n          }\n          return urlPattern;\n      }\n    });\n  }\n}\nexports.NetworkProcessor = NetworkProcessor;","map":{"version":3,"names":["protocol_js_1","require","assert_js_1","NetworkUtils_js_1","NetworkProcessor","browsingContextStorage","networkStorage","constructor","addIntercept","params","verifyContextsList","contexts","urlPatterns","parsedUrlPatterns","parseUrlPatterns","intercept","phases","continueRequest","networkId","request","url","undefined","parseUrlString","getBlockedRequestOrFail","method","headers","requestHeaders","cdpFetchHeadersFromBidiNetworkHeaders","continueResponse","statusCode","reasonPhrase","responseHeaders","responseCode","responsePhrase","continueWithAuth","username","password","action","credentials","assert","type","response","cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction","failRequest","getRequestOrFail","currentInterceptPhase","InvalidArgumentException","NoSuchRequestException","provideResponse","body","value","removeIntercept","#getRequestOrFail","id","getRequestById","#getBlockedRequestOrFail","includes","URL","error","map","urlPattern","pattern","protocol","hostname","port","pathname","search","length","match","buildUrlPatternString","exports"],"sources":["../../../../../src/bidiMapper/domains/network/NetworkProcessor.ts"],"sourcesContent":[null],"mappings":";;;;;;AAkBA,MAAAA,aAAA,GAAAC,OAAA;AAMA,MAAAC,WAAA,GAAAD,OAAA;AAKA,MAAAE,iBAAA,GAAAF,OAAA;AAMA;AACA,MAAaG,gBAAgB;EAClB,CAAAC,sBAAuB;EACvB,CAAAC,cAAe;EAExBC,YACEF,sBAA8C,EAC9CC,cAA8B;IAE9B,IAAI,CAAC,CAAAD,sBAAuB,GAAGA,sBAAsB;IACrD,IAAI,CAAC,CAAAC,cAAe,GAAGA,cAAc;EACvC;EAEA,MAAME,YAAYA,CAChBC,MAAsC;IAEtC;IACA,IAAI,CAAC,CAAAJ,sBAAuB,CAACK,kBAAkB,CAACD,MAAM,CAACE,QAAQ,CAAC;IAEhE,MAAMC,WAAW,GAAyBH,MAAM,CAACG,WAAW,IAAI,EAAE;IAClE,MAAMC,iBAAiB,GACrBT,gBAAgB,CAACU,gBAAgB,CAACF,WAAW,CAAC;IAEhD,MAAMG,SAAS,GACb,MAAM,IAAI,CAAC,CAAAT,cAAe,CAACE,YAAY,CAAC;MACtCI,WAAW,EAAEC,iBAAiB;MAC9BG,MAAM,EAAEP,MAAM,CAACO;KAChB,CAAC;IAEJ,OAAO;MACLD;KACD;EACH;EAEA,MAAME,eAAeA,CACnBR,MAAyC;IAEzC,MAAMS,SAAS,GAAGT,MAAM,CAACU,OAAO;IAEhC,IAAIV,MAAM,CAACW,GAAG,KAAKC,SAAS,EAAE;MAC5BjB,gBAAgB,CAACkB,cAAc,CAACb,MAAM,CAACW,GAAG,CAAC;IAC7C;IAEA,MAAMD,OAAO,GAAG,IAAI,CAAC,CAAAI,uBAAwB,CAACL,SAAS,EAAE,C,mEAExD,CAAC;IAEF,MAAM;MAACE,GAAG;MAAEI,MAAM;MAAEC;IAAO,CAAC,GAAGhB,MAAM;IACrC;IACA;IACA;IAEA,MAAMiB,cAAc,GAClB,IAAAvB,iBAAA,CAAAwB,qCAAqC,EAACF,OAAO,CAAC;IAEhD,MAAMN,OAAO,CAACF,eAAe,CAACG,GAAG,EAAEI,MAAM,EAAEE,cAAc,CAAC;IAE1D,OAAO,EAAE;EACX;EAEA,MAAME,gBAAgBA,CACpBnB,MAA0C;IAE1C,MAAMS,SAAS,GAAGT,MAAM,CAACU,OAAO;IAChC,MAAM;MAACU,UAAU;MAAEC,YAAY;MAAEL;IAAO,CAAC,GAAGhB,MAAM;IAClD,MAAMU,OAAO,GAAG,IAAI,CAAC,CAAAI,uBAAwB,CAACL,SAAS,EAAE,C,+DAExD,CAAC;IAEF,MAAMa,eAAe,GACnB,IAAA5B,iBAAA,CAAAwB,qCAAqC,EAACF,OAAO,CAAC;IAEhD;IACA;IACA;IAEA,MAAMN,OAAO,CAACS,gBAAgB,CAAC;MAC7BI,YAAY,EAAEH,UAAU;MACxBI,cAAc,EAAEH,YAAY;MAC5BC;KACD,CAAC;IAEF,OAAO,EAAE;EACX;EAEA,MAAMG,gBAAgBA,CACpBzB,MAA0C;IAE1C,MAAMS,SAAS,GAAGT,MAAM,CAACU,OAAO;IAChC,MAAMA,OAAO,GAAG,IAAI,CAAC,CAAAI,uBAAwB,CAACL,SAAS,EAAE,C,yDAExD,CAAC;IAEF,IAAIiB,QAA4B;IAChC,IAAIC,QAA4B;IAEhC,IAAI3B,MAAM,CAAC4B,MAAM,KAAK,oBAAoB,EAAE;MAC1C,MAAM;QAACC;MAAW,CAAC,GAAG7B,MAAM;MAE5B0B,QAAQ,GAAGG,WAAW,CAACH,QAAQ;MAC/BC,QAAQ,GAAGE,WAAW,CAACF,QAAQ;MAC/B;MACA;MACA,IAAAlC,WAAA,CAAAqC,MAAM,EACJD,WAAW,CAACE,IAAI,KAAK,UAAU,EAC/B,oBAAoBF,WAAW,CAACE,IAAI,qBAAqB,CAC1D;IACH;IAEA,MAAMC,QAAQ,GAAG,IAAAtC,iBAAA,CAAAuC,0DAA0D,EACzEjC,MAAM,CAAC4B,MAAM,CACd;IAED,MAAMlB,OAAO,CAACe,gBAAgB,CAAC;MAC7BO,QAAQ;MACRN,QAAQ;MACRC;KACD,CAAC;IAEF,OAAO,EAAE;EACX;EAEA,MAAMO,WAAWA,CAAC;IAChBxB,OAAO,EAAED;EAAS,CACY;IAC9B,MAAMC,OAAO,GAAG,IAAI,CAAC,CAAAyB,gBAAiB,CAAC1B,SAAS,CAAC;IACjD,IAAIC,OAAO,CAAC0B,qBAAqB,+DAA0C;MACzE,MAAM,IAAI7C,aAAA,CAAA8C,wBAAwB,CAChC,YAAY5B,SAAS,4CAA4C,CAClE;IACH;IACA,IAAI,CAACC,OAAO,CAAC0B,qBAAqB,EAAE;MAClC,MAAM,IAAI7C,aAAA,CAAA+C,sBAAsB,CAC9B,4CAA4C7B,SAAS,GAAG,CACzD;IACH;IAEA,MAAMC,OAAO,CAACwB,WAAW,CAAC,QAAQ,CAAC;IAEnC,OAAO,EAAE;EACX;EAEA,MAAMK,eAAeA,CACnBvC,MAAyC;IAEzC,MAAM;MACJoB,UAAU;MACVC,YAAY;MACZL,OAAO;MACPwB,IAAI;MACJ9B,OAAO,EAAED;IAAS,CACnB,GAAGT,MAAM;IAEV;IACA;IAEA,MAAMsB,eAAe,GACnB,IAAA5B,iBAAA,CAAAwB,qCAAqC,EAACF,OAAO,CAAC;IAEhD;IACA;IACA;IACA,MAAMN,OAAO,GAAG,IAAI,CAAC,CAAAI,uBAAwB,CAACL,SAAS,EAAE,C,6LAIxD,CAAC;IACF,MAAMC,OAAO,CAAC6B,eAAe,CAAC;MAC5BhB,YAAY,EAAEH,UAAU,IAAIV,OAAO,CAACU,UAAU;MAC9CI,cAAc,EAAEH,YAAY;MAC5BC,eAAe;MACfkB,IAAI,EAAEA,IAAI,EAAEC,KAAK,CAAE;KACpB,CAAC;IAEF,OAAO,EAAE;EACX;EAEA,MAAMC,eAAeA,CACnB1C,MAAyC;IAEzC,MAAM,IAAI,CAAC,CAAAH,cAAe,CAAC6C,eAAe,CAAC1C,MAAM,CAACM,SAAS,CAAC;IAE5D,OAAO,EAAE;EACX;EAEA,CAAA6B,gBAAiBQ,CAACC,EAAmB;IACnC,MAAMlC,OAAO,GAAG,IAAI,CAAC,CAAAb,cAAe,CAACgD,cAAc,CAACD,EAAE,CAAC;IACvD,IAAI,CAAClC,OAAO,EAAE;MACZ,MAAM,IAAInB,aAAA,CAAA+C,sBAAsB,CAC9B,4BAA4BM,EAAE,iBAAiB,CAChD;IACH;IACA,OAAOlC,OAAO;EAChB;EAEA,CAAAI,uBAAwBgC,CACtBF,EAAmB,EACnBrC,MAAgC;IAEhC,MAAMG,OAAO,GAAG,IAAI,CAAC,CAAAyB,gBAAiB,CAACS,EAAE,CAAC;IAC1C,IAAI,CAAClC,OAAO,CAAC0B,qBAAqB,EAAE;MAClC,MAAM,IAAI7C,aAAA,CAAA+C,sBAAsB,CAC9B,4CAA4CM,EAAE,GAAG,CAClD;IACH;IACA,IACElC,OAAO,CAAC0B,qBAAqB,IAC7B,CAAC7B,MAAM,CAACwC,QAAQ,CAACrC,OAAO,CAAC0B,qBAAqB,CAAC,EAC/C;MACA,MAAM,IAAI7C,aAAA,CAAA8C,wBAAwB,CAChC,mCAAmCO,EAAE,YAAYlC,OAAO,CAAC0B,qBAAqB,SAAS,CACxF;IACH;IAEA,OAAO1B,OAAO;EAChB;EAEA;;;;EAIA,OAAOG,cAAcA,CAACF,GAAW;IAC/B,IAAI;MACF,OAAO,IAAIqC,GAAG,CAACrC,GAAG,CAAC;IACrB,CAAC,CAAC,OAAOsC,KAAK,EAAE;MACd,MAAM,IAAI1D,aAAA,CAAA8C,wBAAwB,CAAC,gBAAgB1B,GAAG,MAAMsC,KAAK,EAAE,CAAC;IACtE;EACF;EAEA,OAAO5C,gBAAgBA,CACrBF,WAAiC;IAEjC,OAAOA,WAAW,CAAC+C,GAAG,CAAEC,UAAU,IAAI;MACpC,QAAQA,UAAU,CAACpB,IAAI;QACrB,KAAK,QAAQ;UAAE;YACbpC,gBAAgB,CAACkB,cAAc,CAACsC,UAAU,CAACC,OAAO,CAAC;YACnD,OAAOD,UAAU;UACnB;QACA,KAAK,SAAS;UACZ;UACA,IACEA,UAAU,CAACE,QAAQ,KAAKzC,SAAS,IACjCuC,UAAU,CAACG,QAAQ,KAAK1C,SAAS,IACjCuC,UAAU,CAACI,IAAI,KAAK3C,SAAS,IAC7BuC,UAAU,CAACK,QAAQ,KAAK5C,SAAS,IACjCuC,UAAU,CAACM,MAAM,KAAK7C,SAAS,EAC/B;YACA,OAAOuC,UAAU;UACnB;UAEA,IAAIA,UAAU,CAACE,QAAQ,KAAK,EAAE,EAAE;YAC9B,MAAM,IAAI9D,aAAA,CAAA8C,wBAAwB,CAChC,qCAAqC,CACtC;UACH;UAEA,IAAIc,UAAU,CAACG,QAAQ,KAAK,EAAE,EAAE;YAC9B,MAAM,IAAI/D,aAAA,CAAA8C,wBAAwB,CAChC,qCAAqC,CACtC;UACH;UAEA,IAAI,CAACc,UAAU,CAACG,QAAQ,EAAEI,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAIP,UAAU,CAACE,QAAQ,EAAEM,KAAK,CAAC,QAAQ,CAAC,EAAE;cACxC,MAAM,IAAIpE,aAAA,CAAA8C,wBAAwB,CAChC,uCAAuC,CACxC;YACH;YAEA,IAAIc,UAAU,CAACG,QAAQ,EAAEP,QAAQ,CAAC,GAAG,CAAC,EAAE;cACtC,MAAM,IAAIxD,aAAA,CAAA8C,wBAAwB,CAChC,+CAA+C,CAChD;YACH;UACF;UAEA,IAAIc,UAAU,CAACI,IAAI,KAAK,EAAE,EAAE;YAC1B,MAAM,IAAIhE,aAAA,CAAA8C,wBAAwB,CAChC,iCAAiC,CAClC;UACH;UAEA,IAAI;YACF,IAAIW,GAAG,CAAC,IAAAtD,iBAAA,CAAAkE,qBAAqB,EAACT,UAAU,CAAC,CAAC;UAC5C,CAAC,CAAC,OAAOF,KAAK,EAAE;YACd,MAAM,IAAI1D,aAAA,CAAA8C,wBAAwB,CAAC,GAAGY,KAAK,EAAE,CAAC;UAChD;UACA,OAAOE,UAAU;MACrB;IACF,CAAC,CAAC;EACJ;;AAjSFU,OAAA,CAAAlE,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}