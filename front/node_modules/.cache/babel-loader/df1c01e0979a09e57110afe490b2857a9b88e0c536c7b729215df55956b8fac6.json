{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\tryg\\\\front\\\\src\\\\components\\\\ScraperForm.js\",\n  _s = $RefreshSig$();\n// // src/components/ScraperForm.js\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//         const response = await axios.post('http://localhost:3011/scrape', {\n//             urls: urls.split(',').map((url) => url.trim()),\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\n//           });\n\n//       console.log(response.data); \n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n// //save in stae and print as map\n\n//   return (\n//      <form onSubmit={handleSubmit}>\n//       <label>\n//         Enter URLs (comma-separated):\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//       </label>\n//       <br />\n//       <label>\n//         Enter jQuery selectors (comma-separated):\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//       </label>\n//       <br />\n//       <button type=\"submit\">Submit</button>\n\n//     </form>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// --------------------------------\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const ScraperForm = () => {\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:3015/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data);\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Enter URLs (comma-separated):\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\n//         </label>\n//         <br />\n//         <label>\n//           Enter jQuery selectors (comma-separated):\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {/* Display the output on the frontend */}\n//       <div>\n//         <h2>Output:</h2>\n//         <pre>{output}</pre>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ScraperForm;\n\n// ---------------------------------------------------------perfect\n\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport './form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = ({\n  activeFieldset\n}) => /*#__PURE__*/_jsxDEV(\"ul\", {\n  id: \"progressbar\",\n  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 1 ? 'active' : '',\n    children: \"URL EXTRACTION\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 2 ? 'active' : '',\n    children: \"SCRAPING\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n    className: activeFieldset === 3 ? 'active' : '',\n    children: \"EXTRACTED DATA\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 117,\n  columnNumber: 5\n}, this);\n_c = ProgressBar;\nconst Fieldset = ({\n  title,\n  subtitle,\n  children,\n  style\n}) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n  style: style,\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"fs-title\",\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"fs-subtitle\",\n    children: subtitle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 7\n  }, this), children]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 5\n}, this);\n_c2 = Fieldset;\nconst ScraperForm = () => {\n  _s();\n  const [activeFieldset, setActiveFieldset] = useState(1);\n  const [formData, setFormData] = useState({\n    email: '',\n    text2: '',\n    text3: ''\n  });\n  const [urls, setUrls] = useState('');\n  const [selectors, setSelectors] = useState('');\n  const [output, setOutput] = useState('');\n  const [showUrlWarning, setShowUrlWarning] = useState(false);\n  const [downloadReady, setDownloadReady] = useState(false);\n  const preRef = useRef(null);\n  const isUrlValid = userInput => {\n    const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n    return res !== null;\n  };\n  useEffect(() => {\n    // Check if the output has been updated and set downloadReady accordingly\n    if (output.trim() !== '') {\n      setDownloadReady(true);\n    }\n  }, [output]);\n  const handleDownload = async () => {\n    try {\n      const response = await fetch('http://localhost:5009/download-output');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'output.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setDownloadReady(false);\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n    }\n  };\n  const downloadPDF = async () => {\n    try {\n      const response = await fetch('http://localhost:5009/generate-pdf');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'data.pdf');\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n    }\n  };\n  const handleStart = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5009/scrape', {\n        urls\n      });\n      setUrls(response.data.urls || []);\n    } catch (error) {\n      console.error('Error scraping URL:', error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n    if (name === 'email') {\n      setShowUrlWarning(!isUrlValid(value));\n    }\n  };\n  const handleNext = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset + 1);\n  };\n  const handlePrevious = () => {\n    setActiveFieldset(prevActiveFieldset => prevActiveFieldset - 1);\n  };\n  const handleSubmit2 = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5009/scrape', {\n        urls: urls.split(',').map(url => url.trim()),\n        selectors: selectors.split(',').map(selector => selector.trim())\n      });\n      console.log(response.data + '\\n');\n\n      // Set the output in the state to be displayed on the frontend\n      setOutput(response.data.tableString);\n      handleNext();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"msform\",\n      onSubmit: handleSubmit2,\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        activeFieldset: activeFieldset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 1 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"fs-title\",\n          children: \"Provide the Main URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          class: \"fs-subtitle\",\n          children: \"This step will provide the list of all URLS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          placeholder: \"Main URL\",\n          value: formData.email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 14\n        }, this), showUrlWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Please enter a valid URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: downloadPDF,\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: handleNext,\n          disabled: !formData.email.trim() || showUrlWarning,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 2 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"SCRAPING STAGE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"fs-subtitle\",\n          children: \"Enter the URL and the selector that you want to scrape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: urls,\n          placeholder: \"Enter URL to scrape\",\n          onChange: e => {\n            setUrls(e.target.value);\n            setShowUrlWarning(!isUrlValid(e.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Selectors\",\n          value: selectors,\n          onChange: e => setSelectors(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }, this), showUrlWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Please enter a valid URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit action-button\",\n          onClick: handleSubmit2,\n          disabled: !urls || !selectors || showUrlWarning,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        style: {\n          display: activeFieldset === 3 ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"fs-title\",\n          children: \"EXTRACTED DATA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            ref: preRef,\n            children: output\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"previous action-button\",\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"next action-button\",\n          onClick: downloadReady ? handleDownload : null,\n          disabled: !output.trim(),\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(ScraperForm, \"tDDfWAoYls8nYf/w3atov2xzAgg=\");\n_c3 = ScraperForm;\nexport default ScraperForm;\n\n// https://quotes.toscrape.com/page/1/\n// small.author\n\n//url shortening- takes limited url\n//progress bar\n//download extracted result\n\n// const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   return(\n//     <div>\n\n// <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\n// <h2 class=\"fs-title\">Provide the Main URL</h2>\n//      <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\n//  <input\n//  type=\"text\"\n//  name=\"email\"\n//  placeholder=\"Main URL\"\n//  value={formData.email}\n//  onChange={handleInputChange}\n//  />\n\n//   <button type=\"button\" className=\"next action-button\" onClick={handleStart} >\n//     Start\n//   </button>\n\n//   <button type=\"button\" className=\"next action-button\" onClick={downloadPDF} >\n//     Download\n//   </button>\n//   <button type=\"button\" className=\"next action-button\" onClick={handleNext} disabled={!formData.email.trim()}>\n//     Next\n//   </button>\n// </Fieldset>\n// </div>\n\n//   );\n\n// add URL validation to the input field such that the third button is clickable only after a valid url is entered in the input field. \n\n// this is the frontend code:\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './form.css';\n\n// const ProgressBar = ({ activeFieldset }) => (\n//     <ul id=\"progressbar\">\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\n//       <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\n//       <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\n//     </ul>\n//   );\n\n//   const Fieldset = ({ title, subtitle, children, style }) => (\n//     <fieldset style={style}>\n//       <h2 className=\"fs-title\">{title}</h2>\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\n//       {children}\n//     </fieldset>\n//   );\n\n// const ScraperForm = () => {\n\n//     const [activeFieldset, setActiveFieldset] = useState(1);\n\n//     const [formData, setFormData] = useState({\n//       email: '',\n//       text2: '',\n//       text3: '',\n//     });\n\n//   const [urls, setUrls] = useState('');\n//   const [selectors, setSelectors] = useState('');\n//   const [output, setOutput] = useState('');\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\n\n//   const isUrlValid = (userInput) => {\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\n//     return res !== null;\n//   };\n\n//   const downloadPDF = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5009/generate-pdf');\n//       const blob = await response.blob();\n//       const url = window.URL.createObjectURL(blob);\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', 'data.pdf');\n//       document.body.appendChild(link);\n//       link.click();\n//       link.parentNode.removeChild(link);\n//     } catch (error) {\n//       console.error('Error downloading PDF:', error);\n//     }\n//   };\n\n//   const handleStart = async (e) => {\n//     e.preventDefault();\n\n//     try{\n//       const response = await axios.post('http://localhost:5009/scrape', { urls });\n//       setUrls(response.data.urls || []);\n//     } catch (error) {\n//       console.error('Error scraping URL:', error);\n//     }\n//   }\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n\n//     if (name === 'email') {\n//       setShowUrlWarning(!isUrlValid(value));\n//     }\n//   };\n\n//   const handleNext = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\n//   };\n\n//   const handlePrevious = () => {\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\n//   };\n\n//   const handleSubmit2 = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:5009/scrape', {\n//         urls: urls.split(',').map((url) => url.trim()),\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\n//       });\n\n//       console.log(response.data + '\\n');\n\n//       // Set the output in the state to be displayed on the frontend\n//       setOutput(response.data.tableString);\n//       handleNext();\n\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n\n//   };\n\n//   return (\n\n//     <div>\n\n//       <form id=\"msform\" onSubmit={handleSubmit2}> \n//         <ProgressBar activeFieldset={activeFieldset} />\n\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\n//         <h2 class=\"fs-title\">Provide the Main URL</h2>\n//  \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\n//              <input\n//           type=\"text\"\n//           name=\"email\"\n//           placeholder=\"Main URL\"\n//           value={formData.email}\n//           onChange={handleInputChange}\n//         />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\n//           Start\n//         </button>\n//         <button type=\"button\" className=\"next action-button\" onClick={downloadPDF}>\n//           Download\n//         </button>\n//         <button\n//           type=\"button\"\n//           className=\"next action-button\"\n//           onClick={handleNext}\n//           disabled={!formData.email.trim() || showUrlWarning}\n//         >\n//           Next\n//         </button>\n//         </Fieldset>\n\n//        <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\n//         <input\n//         type=\"text\"\n//         value={urls}\n//         placeholder=\"Enter URL to scrape\"\n//         onChange={(e) => {\n//           setUrls(e.target.value);\n//           setShowUrlWarning(!isUrlValid(e.target.value));\n//         }}\n//       />\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\n//           Previous\n//         </button>\n//         <button\n//         type=\"submit\"\n//         className=\"submit action-button\"\n//         onClick={handleSubmit2}\n//         disabled={!urls || !selectors || showUrlWarning}>\n//           Submit\n//         </button>\n//         </Fieldset> \n\n//       <Fieldset  style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\n//       <h2 className=\"fs-title\">EXTRACTED DATA</h2>\n//       <div className=\"result\">\n//         <pre>{output}</pre>\n//       </div>\n\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\n//           Previous\n//         </button>\n//         <button type=\"button\" className=\"next action-button\" >\n//             Download\n//           </button>\n\n//       </Fieldset>\n\n//     </form>\n//     </div>\n\n//   );\n// };\n\n// export default ScraperForm;\n\n// this is the backend code:\n\n// const express = require('express');\n// const bodyParser = require('body-parser');\n// const request = require('request-promise');\n// const cheerio = require('cheerio');\n// const fs = require('fs');\n// const Json2csvParser = require('json2csv').Parser;\n// const cors = require('cors');\n\n// const app = express();\n// const port = 5009;\n\n// app.use(bodyParser.json());\n// app.use(cors());\n\n// app.get('/', (req, res) => {\n//   res.send('Hello, this is the root!');\n// });\n\n// app.post('/scrape', async (req, res) => {\n//   const { urls, selectors } = req.body;\n//   let pages = [];\n\n//   for (let article of urls) {\n//     const response = await request({\n//       uri: article.trim(),\n//       gzip: true,\n//     });\n\n//     let $ = cheerio.load(response);\n\n//     let pageData = {};\n\n//     selectors.forEach((selector) => {\n//       let values = [];\n//       $(selector).each((index, element) => {\n//         values.push($(element).text().trim());\n//       });\n//       pageData[selector] = values;\n//     });\n\n//     pages.push(pageData);\n//   }\n\n//   // Save data to a file or database as needed\n//   fs.writeFileSync('./data.json', JSON.stringify(pages), 'utf-8');\n\n//   const tableString = getTableString(pages);\n//   const outputPath = './output.txt';\n//   fs.writeFileSync(outputPath, tableString, 'utf-8');\n\n//   res.json({ tableString, pages });\n\n//   const fields = selectors;\n//   const json2csvParser = new Json2csvParser({ fields });\n//   const csv = json2csvParser.parse(pages);\n//   console.log(csv);\n\n//   console.table(pages);\n// });\n\n// // table string\n// function getTableString(pages) {\n//   let tableString = '';\n//   pages.forEach((page) => {\n//     for (let key in page) {\n//       tableString += `${key}: \\n ${page[key].join('\\n')}\\n`;\n//     }\n//     tableString += '\\n';\n//   });\n//   return tableString;\n// }\n\n// app.listen(port, () => {\n//   console.log(`Server is running on http://localhost:${port}`);\n// });\n\n// modify the code such that the second button, when clicked in the third fieldset is capable of downloading the content of output.txt that is generated in the back FileSystemDirectoryReader. clicking third button will download output.txt as a pdf.\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProgressBar\");\n$RefreshReg$(_c2, \"Fieldset\");\n$RefreshReg$(_c3, \"ScraperForm\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","ProgressBar","activeFieldset","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","Fieldset","title","subtitle","style","_c2","ScraperForm","_s","setActiveFieldset","formData","setFormData","email","text2","text3","urls","setUrls","selectors","setSelectors","output","setOutput","showUrlWarning","setShowUrlWarning","downloadReady","setDownloadReady","preRef","isUrlValid","userInput","res","match","useEffect","trim","handleDownload","response","fetch","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","error","console","downloadPDF","parentNode","handleStart","e","preventDefault","post","data","handleInputChange","name","value","target","prevData","handleNext","prevActiveFieldset","handlePrevious","handleSubmit2","split","map","selector","log","tableString","onSubmit","display","class","type","placeholder","onChange","color","onClick","disabled","ref","_c3","$RefreshReg$"],"sources":["C:/Users/PC/tryg/front/src/components/ScraperForm.js"],"sourcesContent":["// // src/components/ScraperForm.js\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//         const response = await axios.post('http://localhost:3011/scrape', {\r\n//             urls: urls.split(',').map((url) => url.trim()),\r\n//             selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//           });\r\n\r\n//       console.log(response.data); \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n// //save in stae and print as map\r\n\r\n//   return (\r\n//      <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         Enter URLs (comma-separated):\r\n//         <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Enter jQuery selectors (comma-separated):\r\n//         <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\">Submit</button>\r\n  \r\n//     </form>\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n// --------------------------------\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const ScraperForm = () => {\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:3015/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data);\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URLs (comma-separated):\r\n//           <input type=\"text\" value={urls} onChange={(e) => setUrls(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Enter jQuery selectors (comma-separated):\r\n//           <input type=\"text\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         </label>\r\n//         <br />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {/* Display the output on the frontend */}\r\n//       <div>\r\n//         <h2>Output:</h2>\r\n//         <pre>{output}</pre>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n// ---------------------------------------------------------perfect\r\n\r\n\r\n\r\n\r\nimport React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './form.css';\r\n\r\n\r\nconst ProgressBar = ({ activeFieldset }) => (\r\n    <ul id=\"progressbar\">\r\n      <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n      <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\r\n      <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\r\n    </ul>\r\n  );\r\n  \r\n  const Fieldset = ({ title, subtitle, children, style }) => (\r\n    <fieldset style={style}>\r\n      <h2 className=\"fs-title\">{title}</h2>\r\n      <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n      {children}\r\n    </fieldset>\r\n  );\r\n\r\nconst ScraperForm = () => {\r\n\r\n    \r\n    const [activeFieldset, setActiveFieldset] = useState(1);\r\n  \r\n    const [formData, setFormData] = useState({\r\n      email: '',\r\n      text2: '',\r\n      text3: '',\r\n    });\r\n\r\n\r\n  const [urls, setUrls] = useState('');\r\n  const [selectors, setSelectors] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n  const [downloadReady, setDownloadReady] = useState(false); \r\n  const preRef = useRef(null);\r\n\r\n\r\n  const isUrlValid = (userInput) => {\r\n    const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n    return res !== null;\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Check if the output has been updated and set downloadReady accordingly\r\n    if (output.trim() !== '') {\r\n      setDownloadReady(true);\r\n    }\r\n  }, [output]);\r\n\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5009/download-output');\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'output.pdf');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      setDownloadReady(false);\r\n    } catch (error) {\r\n      console.error('Error downloading PDF:', error);\r\n    }\r\n  };\r\n\r\n  const downloadPDF = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5009/generate-pdf');\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'data.pdf');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n    } catch (error) {\r\n      console.error('Error downloading PDF:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  const handleStart = async (e) => {\r\n    e.preventDefault();\r\n   \r\n   \r\n    try{\r\n      const response = await axios.post('http://localhost:5009/scrape', { urls });\r\n      setUrls(response.data.urls || []);\r\n    } catch (error) {\r\n      console.error('Error scraping URL:', error);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n\r\n    if (name === 'email') {\r\n      setShowUrlWarning(!isUrlValid(value));\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleSubmit2 = async (e) => {\r\n    e.preventDefault();\r\n\r\n \r\n    try {\r\n      const response = await axios.post('http://localhost:5009/scrape', {\r\n        urls: urls.split(',').map((url) => url.trim()),\r\n        selectors: selectors.split(',').map((selector) => selector.trim()),\r\n      });\r\n\r\n      console.log(response.data + '\\n');\r\n\r\n      // Set the output in the state to be displayed on the frontend\r\n      setOutput(response.data.tableString);\r\n      handleNext();\r\n\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n   \r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n      <form id=\"msform\" onSubmit={handleSubmit2}> \r\n        <ProgressBar activeFieldset={activeFieldset} />\r\n\r\n        <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n        <h2 class=\"fs-title\">Provide the Main URL</h2>\r\n \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n             <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Main URL\"\r\n          value={formData.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n        <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n          Start\r\n        </button>\r\n        <button type=\"button\" className=\"next action-button\" onClick={downloadPDF}>\r\n          Download\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"next action-button\"\r\n          onClick={handleNext}\r\n          disabled={!formData.email.trim() || showUrlWarning}\r\n        >\r\n          Next\r\n        </button>\r\n        </Fieldset>\r\n\r\n\r\n\r\n       <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n       <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n        <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n        <input\r\n        type=\"text\"\r\n        value={urls}\r\n        placeholder=\"Enter URL to scrape\"\r\n        onChange={(e) => {\r\n          setUrls(e.target.value);\r\n          setShowUrlWarning(!isUrlValid(e.target.value));\r\n        }}\r\n      />\r\n        <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n        {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n          Previous\r\n        </button>\r\n        <button\r\n        type=\"submit\"\r\n        className=\"submit action-button\"\r\n        onClick={handleSubmit2}\r\n        disabled={!urls || !selectors || showUrlWarning}>\r\n          Submit\r\n        </button>\r\n        </Fieldset> \r\n\r\n     \r\n      <Fieldset  style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n      <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n      <div className=\"result\">\r\n      <pre ref={preRef}>{output}</pre>\r\n      </div>\r\n\r\n        <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n          Previous\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"next action-button\"\r\n          onClick={downloadReady ? handleDownload : null}\r\n          disabled={!output.trim()}>\r\n          Download\r\n        </button>\r\n\r\n      </Fieldset>\r\n\r\n      \r\n\r\n    </form>\r\n    </div>\r\n    \r\n     \r\n\r\n\r\n  );\r\n};\r\n\r\nexport default ScraperForm;\r\n\r\n\r\n\r\n\r\n// https://quotes.toscrape.com/page/1/\r\n// small.author\r\n\r\n\r\n\r\n\r\n\r\n\r\n//url shortening- takes limited url\r\n//progress bar\r\n//download extracted result\r\n\r\n\r\n\r\n// const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prevData) => ({\r\n//       ...prevData,\r\n//       [name]: value,\r\n//     }));\r\n//   };\r\n\r\n//   return(\r\n//     <div>\r\n\r\n// <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n// <h2 class=\"fs-title\">Provide the Main URL</h2>\r\n//      <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n//  <input\r\n//  type=\"text\"\r\n//  name=\"email\"\r\n//  placeholder=\"Main URL\"\r\n//  value={formData.email}\r\n//  onChange={handleInputChange}\r\n//  />\r\n\r\n//   <button type=\"button\" className=\"next action-button\" onClick={handleStart} >\r\n//     Start\r\n//   </button>\r\n  \r\n//   <button type=\"button\" className=\"next action-button\" onClick={downloadPDF} >\r\n//     Download\r\n//   </button>\r\n//   <button type=\"button\" className=\"next action-button\" onClick={handleNext} disabled={!formData.email.trim()}>\r\n//     Next\r\n//   </button>\r\n// </Fieldset>\r\n// </div>\r\n\r\n//   );\r\n\r\n\r\n// add URL validation to the input field such that the third button is clickable only after a valid url is entered in the input field. \r\n\r\n\r\n// this is the frontend code:\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './form.css';\r\n\r\n\r\n// const ProgressBar = ({ activeFieldset }) => (\r\n//     <ul id=\"progressbar\">\r\n//       <li className={activeFieldset === 1 ? 'active' : ''}>URL EXTRACTION</li>\r\n//       <li className={activeFieldset === 2 ? 'active' : ''}>SCRAPING</li>\r\n//       <li className={activeFieldset === 3 ? 'active' : ''}>EXTRACTED DATA</li>\r\n//     </ul>\r\n//   );\r\n  \r\n//   const Fieldset = ({ title, subtitle, children, style }) => (\r\n//     <fieldset style={style}>\r\n//       <h2 className=\"fs-title\">{title}</h2>\r\n//       <h3 className=\"fs-subtitle\">{subtitle}</h3>\r\n//       {children}\r\n//     </fieldset>\r\n//   );\r\n\r\n// const ScraperForm = () => {\r\n\r\n\r\n//     const [activeFieldset, setActiveFieldset] = useState(1);\r\n  \r\n//     const [formData, setFormData] = useState({\r\n//       email: '',\r\n//       text2: '',\r\n//       text3: '',\r\n//     });\r\n\r\n\r\n//   const [urls, setUrls] = useState('');\r\n//   const [selectors, setSelectors] = useState('');\r\n//   const [output, setOutput] = useState('');\r\n//   const [showUrlWarning, setShowUrlWarning] = useState(false);\r\n\r\n\r\n//   const isUrlValid = (userInput) => {\r\n//     const res = userInput.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g);\r\n//     return res !== null;\r\n//   };\r\n  \r\n\r\n//   const downloadPDF = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5009/generate-pdf');\r\n//       const blob = await response.blob();\r\n//       const url = window.URL.createObjectURL(blob);\r\n//       const link = document.createElement('a');\r\n//       link.href = url;\r\n//       link.setAttribute('download', 'data.pdf');\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//       link.parentNode.removeChild(link);\r\n//     } catch (error) {\r\n//       console.error('Error downloading PDF:', error);\r\n//     }\r\n//   };\r\n  \r\n  \r\n//   const handleStart = async (e) => {\r\n//     e.preventDefault();\r\n   \r\n   \r\n//     try{\r\n//       const response = await axios.post('http://localhost:5009/scrape', { urls });\r\n//       setUrls(response.data.urls || []);\r\n//     } catch (error) {\r\n//       console.error('Error scraping URL:', error);\r\n//     }\r\n//   }\r\n\r\n\r\n  \r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prevData) => ({\r\n//       ...prevData,\r\n//       [name]: value,\r\n//     }));\r\n\r\n//     if (name === 'email') {\r\n//       setShowUrlWarning(!isUrlValid(value));\r\n//     }\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset + 1);\r\n//   };\r\n\r\n//   const handlePrevious = () => {\r\n//     setActiveFieldset((prevActiveFieldset) => prevActiveFieldset - 1);\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleSubmit2 = async (e) => {\r\n//     e.preventDefault();\r\n\r\n \r\n//     try {\r\n//       const response = await axios.post('http://localhost:5009/scrape', {\r\n//         urls: urls.split(',').map((url) => url.trim()),\r\n//         selectors: selectors.split(',').map((selector) => selector.trim()),\r\n//       });\r\n\r\n//       console.log(response.data + '\\n');\r\n\r\n//       // Set the output in the state to be displayed on the frontend\r\n//       setOutput(response.data.tableString);\r\n//       handleNext();\r\n\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n   \r\n//   };\r\n\r\n//   return (\r\n\r\n//     <div>\r\n\r\n//       <form id=\"msform\" onSubmit={handleSubmit2}> \r\n//         <ProgressBar activeFieldset={activeFieldset} />\r\n\r\n//         <Fieldset style={{ display: activeFieldset === 1 ? 'block' : 'none' }}>\r\n//         <h2 class=\"fs-title\">Provide the Main URL</h2>\r\n//  \t\t    <h3 class=\"fs-subtitle\">This step will provide the list of all URLS</h3>\r\n//              <input\r\n//           type=\"text\"\r\n//           name=\"email\"\r\n//           placeholder=\"Main URL\"\r\n//           value={formData.email}\r\n//           onChange={handleInputChange}\r\n//         />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n//         <button type=\"button\" className=\"next action-button\" onClick={handleStart}>\r\n//           Start\r\n//         </button>\r\n//         <button type=\"button\" className=\"next action-button\" onClick={downloadPDF}>\r\n//           Download\r\n//         </button>\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"next action-button\"\r\n//           onClick={handleNext}\r\n//           disabled={!formData.email.trim() || showUrlWarning}\r\n//         >\r\n//           Next\r\n//         </button>\r\n//         </Fieldset>\r\n\r\n\r\n\r\n//        <Fieldset style={{ display: activeFieldset === 2 ? 'block' : 'none' }}>\r\n//        <h2 className=\"fs-title\">SCRAPING STAGE</h2>\r\n//         <h3 className=\"fs-subtitle\">Enter the URL and the selector that you want to scrape</h3>\r\n//         <input\r\n//         type=\"text\"\r\n//         value={urls}\r\n//         placeholder=\"Enter URL to scrape\"\r\n//         onChange={(e) => {\r\n//           setUrls(e.target.value);\r\n//           setShowUrlWarning(!isUrlValid(e.target.value));\r\n//         }}\r\n//       />\r\n//         <input type=\"text\" placeholder=\"Selectors\" value={selectors} onChange={(e) => setSelectors(e.target.value)} />\r\n//         {showUrlWarning && <p style={{ color: 'red' }}>Please enter a valid URL.</p>}\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious} >\r\n//           Previous\r\n//         </button>\r\n//         <button\r\n//         type=\"submit\"\r\n//         className=\"submit action-button\"\r\n//         onClick={handleSubmit2}\r\n//         disabled={!urls || !selectors || showUrlWarning}>\r\n//           Submit\r\n//         </button>\r\n//         </Fieldset> \r\n\r\n     \r\n//       <Fieldset  style={{ display: activeFieldset === 3 ? 'block' : 'none' }}>\r\n//       <h2 className=\"fs-title\">EXTRACTED DATA</h2>\r\n//       <div className=\"result\">\r\n//         <pre>{output}</pre>\r\n//       </div>\r\n\r\n//         <button type=\"button\" className=\"previous action-button\" onClick={handlePrevious}>\r\n//           Previous\r\n//         </button>\r\n//         <button type=\"button\" className=\"next action-button\" >\r\n//             Download\r\n//           </button>\r\n        \r\n//       </Fieldset>\r\n\r\n      \r\n\r\n//     </form>\r\n//     </div>\r\n    \r\n     \r\n\r\n\r\n//   );\r\n// };\r\n\r\n// export default ScraperForm;\r\n\r\n\r\n\r\n\r\n\r\n// this is the backend code:\r\n\r\n\r\n\r\n\r\n\r\n// const express = require('express');\r\n// const bodyParser = require('body-parser');\r\n// const request = require('request-promise');\r\n// const cheerio = require('cheerio');\r\n// const fs = require('fs');\r\n// const Json2csvParser = require('json2csv').Parser;\r\n// const cors = require('cors');\r\n\r\n// const app = express();\r\n// const port = 5009;\r\n\r\n// app.use(bodyParser.json());\r\n// app.use(cors());\r\n\r\n// app.get('/', (req, res) => {\r\n//   res.send('Hello, this is the root!');\r\n// });\r\n\r\n// app.post('/scrape', async (req, res) => {\r\n//   const { urls, selectors } = req.body;\r\n//   let pages = [];\r\n\r\n//   for (let article of urls) {\r\n//     const response = await request({\r\n//       uri: article.trim(),\r\n//       gzip: true,\r\n//     });\r\n\r\n//     let $ = cheerio.load(response);\r\n\r\n//     let pageData = {};\r\n\r\n//     selectors.forEach((selector) => {\r\n//       let values = [];\r\n//       $(selector).each((index, element) => {\r\n//         values.push($(element).text().trim());\r\n//       });\r\n//       pageData[selector] = values;\r\n//     });\r\n\r\n//     pages.push(pageData);\r\n//   }\r\n\r\n//   // Save data to a file or database as needed\r\n//   fs.writeFileSync('./data.json', JSON.stringify(pages), 'utf-8');\r\n\r\n//   const tableString = getTableString(pages);\r\n//   const outputPath = './output.txt';\r\n//   fs.writeFileSync(outputPath, tableString, 'utf-8');\r\n\r\n//   res.json({ tableString, pages });\r\n\r\n//   const fields = selectors;\r\n//   const json2csvParser = new Json2csvParser({ fields });\r\n//   const csv = json2csvParser.parse(pages);\r\n//   console.log(csv);\r\n\r\n//   console.table(pages);\r\n// });\r\n\r\n// // table string\r\n// function getTableString(pages) {\r\n//   let tableString = '';\r\n//   pages.forEach((page) => {\r\n//     for (let key in page) {\r\n//       tableString += `${key}: \\n ${page[key].join('\\n')}\\n`;\r\n//     }\r\n//     tableString += '\\n';\r\n//   });\r\n//   return tableString;\r\n// }\r\n\r\n// app.listen(port, () => {\r\n//   console.log(`Server is running on http://localhost:${port}`);\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n// modify the code such that the second button, when clicked in the third fieldset is capable of downloading the content of output.txt that is generated in the back FileSystemDirectoryReader. clicking third button will download output.txt as a pdf.\r\n"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAKA;AACA;;AAEA;;AAMA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAOA;AAAA,IAAAN,EAAA,EAAAK,GAAA,EAAA4E,GAAA;AAAAC,YAAA,CAAAlF,EAAA;AAAAkF,YAAA,CAAA7E,GAAA;AAAA6E,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}